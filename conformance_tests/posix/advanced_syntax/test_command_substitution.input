# Test advanced command substitution functionality
# PSH supports both $(...) and backtick `...` command substitution

echo "Testing advanced command substitution:"

# Test basic command substitution
echo "Testing basic command substitution:"
result=$(echo "hello world")
echo "Result: $result"

backtick_result=`echo "backtick test"`
echo "Backtick result: $backtick_result"

# Test nested command substitution
echo "Testing nested command substitution:"
nested=$(echo "outer $(echo "inner") command")
echo "Nested result: $nested"

double_nested=$(echo "level1 $(echo "level2 $(echo "level3")") back")
echo "Double nested: $double_nested"

# Test command substitution with pipes
echo "Testing command substitution with pipes:"
pipe_result=$(echo "test data" | cat | cat)
echo "Pipe result: $pipe_result"

complex_pipe=$(echo -e "line3\nline1\nline2" | sort | head -1)
echo "Complex pipe result: $complex_pipe"

# Test command substitution in different contexts
echo "Testing command substitution contexts:"

# In variable assignment
var=$(echo "assigned value")
echo "Variable: $var"

# In arithmetic
num=$(echo "5")
result=$(($(echo "3") + $num))
echo "Arithmetic with command substitution: $result"

# In conditionals
if [ "$(echo "test")" = "test" ]; then
    echo "Command substitution in conditional works"
fi

# Test command substitution with functions
test_func() {
    echo "function output: $1"
}

echo "Testing command substitution with functions:"
func_result=$(test_func "parameter")
echo "Function result: $func_result"

# Test command substitution with complex commands
echo "Testing complex commands:"

# With for loops inside command substitution
list_result=$(for i in 1 2 3; do echo "item$i"; done)
echo "Loop result: $list_result"

# With if statements inside command substitution
condition_result=$(if [ 1 -eq 1 ]; then echo "true"; else echo "false"; fi)
echo "Condition result: $condition_result"

# Test command substitution with multiple commands
echo "Testing multiple commands:"
multi_result=$(echo "first"; echo "second"; echo "third")
echo "Multi result: $multi_result"

# Test command substitution with redirections
echo "Testing with redirections:"
mkdir -p tmp/cmd_sub
echo "test content" > tmp/cmd_sub/test.txt
file_content=$(cat < tmp/cmd_sub/test.txt)
echo "File content: $file_content"

# Test command substitution with background jobs
echo "Testing with background jobs:"
# Note: background jobs in command substitution are tricky
bg_result=$(echo "background test")
echo "Background result: $bg_result"

# Test command substitution with error handling
echo "Testing error handling:"
error_result=$(echo "good"; false; echo "after error" 2>/dev/null)
echo "Error result: $error_result"

# Test command substitution with special characters
echo "Testing special characters:"
special_result=$(echo "chars: !@#$%^&*()")
echo "Special result: $special_result"

# Test command substitution with quotes
echo "Testing quotes in command substitution:"
quote_result=$(echo 'single quotes')
echo "Quote result: $quote_result"

double_quote_result=$(echo "double quotes")
echo "Double quote result: $double_quote_result"

# Test command substitution with variables
echo "Testing variables in command substitution:"
test_var="variable content"
var_result=$(echo "Variable: $test_var")
echo "Var result: $var_result"

# Test command substitution with glob patterns
echo "Testing glob patterns:"
touch tmp/cmd_sub/file1.txt tmp/cmd_sub/file2.txt
glob_result=$(ls tmp/cmd_sub/*.txt | head -1)
echo "Glob result: $glob_result"

# Test command substitution with arithmetic
echo "Testing arithmetic in command substitution:"
arith_result=$(echo $((10 + 5)))
echo "Arithmetic result: $arith_result"

# Test command substitution with arrays (word splitting)
echo "Testing word splitting:"
words_result=$(echo "one two three")
echo "Words result: $words_result"

# Test large output handling
echo "Testing moderate output:"
large_result=$(seq 1 10)
echo "Large result (first few): $(echo "$large_result" | head -3)"

# Test command substitution in here documents
echo "Testing in here documents:"
cat << EOF
Command substitution in here doc: $(echo "embedded")
Current date: $(date +%Y-%m-%d)
EOF

# Test command substitution with case statement
echo "Testing with case statement:"
case "$(echo "test")" in
    test)
        echo "Case with command substitution works"
        ;;
    *)
        echo "Case didn't match"
        ;;
esac

# Test command substitution with while loop
echo "Testing with while loop:"
echo "$(echo -e "1\n2\n3")" | while read line; do
    echo "Line: $line"
done

# Test backtick vs $() comparison
echo "Testing backtick vs \$() equivalence:"
backtick_test=`echo "backtick"`
dollar_test=$(echo "backtick")
if [ "$backtick_test" = "$dollar_test" ]; then
    echo "Backtick and \$() produce same result"
fi

# Test command substitution with exit codes
echo "Testing exit codes:"
true_result=$(true; echo $?)
false_result=$(false; echo $?)
echo "True exit: $true_result, False exit: $false_result"

# Cleanup
rm -rf tmp/cmd_sub

echo "Advanced command substitution test completed"