# Test advanced loop constructs
# PSH supports various loop types with advanced features

echo "Testing advanced loop constructs:"

# Test C-style for loops (v0.31.0 feature)
echo "Testing C-style for loops:"

# Basic C-style loop
for ((i = 1; i <= 3; i++)); do
    echo "C-style loop: $i"
done

# C-style loop with complex expressions
for ((start = 2, end = 8; start < end; start += 2)); do
    echo "Complex C-style: $start"
done

# C-style loop with empty sections
for ((;;)); do
    echo "Infinite loop broken"
    break
done

# Test while loops with complex conditions
echo "Testing advanced while loops:"

# While with arithmetic conditions
count=1
while ((count <= 3)); do
    echo "Arithmetic while: $count"
    ((count++))
done

# While with command conditions
counter=1
while [ $counter -le 2 ]; do
    echo "Command while: $counter"
    counter=$((counter + 1))
done

# While with function conditions
check_condition() {
    [ $1 -le 2 ]
}

value=1
while check_condition $value; do
    echo "Function while: $value"
    value=$((value + 1))
done

# Test for loops with various iterables
echo "Testing advanced for loops:"

# For loop with command substitution
for item in $(echo "one two three"); do
    echo "Command sub for: $item"
done

# For loop with glob patterns
mkdir -p tmp/loop_test
touch tmp/loop_test/file1.txt tmp/loop_test/file2.txt
for file in tmp/loop_test/*.txt; do
    if [ -f "$file" ]; then
        echo "Glob for: $(basename "$file")"
    fi
done

# For loop with brace expansion
for color in {red,green,blue}; do
    echo "Brace for: $color"
done

# For loop with sequences
for num in {1..5}; do
    echo "Sequence for: $num"
done

# Test nested loops with different types
echo "Testing nested mixed loops:"

# C-style outer, for inner
for ((outer = 1; outer <= 2; outer++)); do
    echo "Outer C-style: $outer"
    for inner in a b; do
        echo "  Inner for: $inner"
    done
done

# For outer, while inner
for letter in X Y; do
    echo "Outer for: $letter"
    count=1
    while [ $count -le 2 ]; do
        echo "  Inner while: $count"
        count=$((count + 1))
    done
done

# Test loops with break and continue at different levels
echo "Testing break/continue in nested loops:"

for outer in 1 2 3; do
    echo "Outer: $outer"
    for inner in a b c; do
        if [ "$outer" = "2" ] && [ "$inner" = "b" ]; then
            echo "  Breaking inner loop"
            break
        fi
        if [ "$outer" = "1" ] && [ "$inner" = "a" ]; then
            echo "  Continuing inner loop"
            continue
        fi
        echo "  Inner: $inner"
    done
done

# Test loops with I/O redirection
echo "Testing loops with I/O redirection:"

# For loop with input redirection
for line in $(cat tmp/loop_test/file1.txt); do
    echo "Line from file: $line"
done 2>/dev/null

# While loop with here document
while read -r line; do
    echo "Here doc line: $line"
done << 'EOF'
line1
line2
line3
EOF

# Loop with output redirection
for num in 1 2 3; do
    echo "Number: $num"
done > tmp/loop_test/output.txt

echo "Loop output written to file:"
cat tmp/loop_test/output.txt

# Test loops with functions
echo "Testing loops with functions:"

process_item() {
    echo "Processing: $1"
    return 0
}

for item in apple banana cherry; do
    process_item "$item"
done

# Test loops with arithmetic operations
echo "Testing loops with arithmetic:"

# Factorial calculation using while
factorial() {
    local n=$1
    local result=1
    while [ $n -gt 1 ]; do
        result=$((result * n))
        n=$((n - 1))
    done
    echo $result
}

echo "Factorial of 5: $(factorial 5)"

# Sum calculation using for
sum=0
for i in {1..10}; do
    sum=$((sum + i))
done
echo "Sum 1-10: $sum"

# Test loops with conditionals inside
echo "Testing loops with conditionals:"

for number in $(seq 1 10); do
    if [ $((number % 2)) -eq 0 ]; then
        echo "$number is even"
    elif [ $((number % 3)) -eq 0 ]; then
        echo "$number is divisible by 3"
    else
        echo "$number is odd"
    fi
done | head -5

# Test loops with variable modifications
echo "Testing variable modifications in loops:"

# Array-like behavior with space-separated values
items="apple banana cherry"
processed=""
for item in $items; do
    processed="$processed processed_$item"
done
echo "Processed items:$processed"

# Test loops with error handling
echo "Testing error handling in loops:"

for cmd in true false echo; do
    if $cmd "test" 2>/dev/null; then
        echo "Command $cmd succeeded"
    else
        echo "Command $cmd failed"
    fi
done

# Test infinite loop protection
echo "Testing controlled infinite loops:"

# While true with break
count=0
while true; do
    count=$((count + 1))
    echo "Infinite loop iteration: $count"
    if [ $count -ge 3 ]; then
        break
    fi
done

# Test loop performance with reasonable iterations
echo "Testing loop performance:"
for i in $(seq 1 100); do
    : # null command
done
echo "100 iterations completed successfully"

# Cleanup
rm -rf tmp/loop_test

echo "Advanced loop constructs test completed"