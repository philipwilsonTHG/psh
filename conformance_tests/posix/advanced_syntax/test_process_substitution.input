# Test process substitution functionality
# PSH supports process substitution <(...) and >(...) (v0.24.0 feature)

echo "Testing process substitution functionality:"

# Test basic input process substitution <(...)
echo "Testing input process substitution <(...):"

# Create test data
mkdir -p tmp/proc_sub
echo -e "apple\nbanana\ncherry" > tmp/proc_sub/fruits.txt
echo -e "cat\ndog\nbird" > tmp/proc_sub/animals.txt

# Compare two command outputs
echo "Comparing command outputs:"
if diff <(sort tmp/proc_sub/fruits.txt) <(sort tmp/proc_sub/fruits.txt) >/dev/null; then
    echo "Process substitution diff: files are identical"
fi

# Test with different commands
echo "Comparing different commands:"
diff <(echo -e "line1\nline2") <(echo -e "line1\nline3") >/dev/null || echo "Files differ as expected"

# Test output process substitution >(...)
echo "Testing output process substitution >(...):"

# Tee to multiple process substitutions
echo "test data" | tee >(cat > tmp/proc_sub/output1.txt) >(cat > tmp/proc_sub/output2.txt) >/dev/null
echo "Data written to multiple files via process substitution"

# Verify the files were created
if [ -f tmp/proc_sub/output1.txt ] && [ -f tmp/proc_sub/output2.txt ]; then
    echo "Output process substitution files created successfully"
    echo "File 1 contents: $(cat tmp/proc_sub/output1.txt)"
    echo "File 2 contents: $(cat tmp/proc_sub/output2.txt)"
fi

# Test process substitution with complex commands
echo "Testing complex commands in process substitution:"

# Process substitution with pipes
echo "Complex pipe in process substitution:"
diff <(ls /usr/bin | head -5) <(ls /bin | head -5) >/dev/null || echo "Directory listings differ"

# Process substitution with command chains
echo "Command chains in process substitution:"
if command -v sort >/dev/null && command -v uniq >/dev/null; then
    echo -e "apple\napple\nbanana" | diff - <(echo -e "apple\nbanana" | sort | uniq) >/dev/null || echo "Unique sorting differs"
fi

# Test process substitution in different contexts
echo "Testing process substitution contexts:"

# In while loop
echo "Process substitution with while:"
while read line; do
    echo "Read: $line"
done < <(echo -e "line1\nline2\nline3")

# In for loop (reading file-like input)
echo "Process substitution with for:"
for file in $(cat <(echo -e "file1\nfile2\nfile3")); do
    echo "File: $file"
done

# Test with cat command
echo "Process substitution with cat:"
cat <(echo "First process") <(echo "Second process")

# Test process substitution with variables
echo "Testing with variables:"
data="test data"
echo "$data" | diff - <(echo "$data") >/dev/null && echo "Variable data matches"

# Test multiple input process substitutions
echo "Testing multiple input process substitutions:"
cat <(echo "Process 1") <(echo "Process 2") <(echo "Process 3")

# Test process substitution with functions
test_function() {
    echo "Function output: $1"
}

echo "Testing process substitution with functions:"
cat <(test_function "first") <(test_function "second")

# Test process substitution with arithmetic
echo "Testing process substitution with arithmetic:"
diff <(echo $((2 + 3))) <(echo "5") >/dev/null && echo "Arithmetic process substitution works"

# Test process substitution with conditional
echo "Testing process substitution with conditionals:"
if [ -n "$(cat <(echo 'test'))" ]; then
    echo "Process substitution in conditional works"
fi

# Test error handling in process substitution
echo "Testing error handling:"
cat <(echo "good") <(false; echo "after error") 2>/dev/null || echo "Error in process substitution handled"

# Test process substitution with glob patterns
echo "Testing process substitution with patterns:"
touch tmp/proc_sub/test1.txt tmp/proc_sub/test2.txt
cat <(ls tmp/proc_sub/test*.txt)

# Test nested process substitution
echo "Testing nested process substitution:"
cat <(cat <(echo "nested") <(echo "process") <(echo "substitution"))

# Test process substitution with redirection
echo "Testing process substitution with redirection:"
(echo "redirected" > tmp/proc_sub/redirected.txt) && cat <(cat tmp/proc_sub/redirected.txt)

# Test process substitution with special characters
echo "Testing special characters:"
echo "Testing with spaces and symbols" | diff - <(echo "Testing with spaces and symbols") >/dev/null && echo "Special characters work"

# Test process substitution performance with reasonable data
echo "Testing with moderate data:"
seq 1 100 | diff - <(seq 1 100) >/dev/null && echo "Moderate data handling works"

# Test cleanup behavior
echo "Testing cleanup:"
echo "Process substitution should clean up temporary files automatically"

# Cleanup test files
rm -rf tmp/proc_sub

echo "Process substitution test completed"