# Test enhanced test operators [[ ]]
# PSH supports enhanced test operators with additional features (v0.27.0 feature)

echo "Testing enhanced test operators [[ ]]:"

# Test string comparison operators
echo "Testing string comparison:"
if [[ "apple" < "banana" ]]; then
    echo "apple < banana (lexicographic)"
fi

if [[ "zebra" > "apple" ]]; then
    echo "zebra > apple (lexicographic)"
fi

# Test regular expression matching
echo "Testing regular expression matching:"
if [[ "hello123" =~ ^[a-z]+[0-9]+$ ]]; then
    echo "hello123 matches pattern ^[a-z]+[0-9]+$"
fi

if [[ "test@example.com" =~ .+@.+\..+ ]]; then
    echo "test@example.com matches email pattern"
fi

# Test pattern matching (not regex)
echo "Testing pattern matching:"
if [[ "file.txt" == *.txt ]]; then
    echo "file.txt matches *.txt pattern"
fi

if [[ "image.png" != *.txt ]]; then
    echo "image.png does not match *.txt pattern"
fi

# Test logical operators
echo "Testing logical operators:"
if [[ 5 -gt 3 && 2 -lt 4 ]]; then
    echo "5 > 3 AND 2 < 4"
fi

if [[ 1 -eq 1 || 1 -eq 2 ]]; then
    echo "1 = 1 OR 1 = 2"
fi

# Test negation
echo "Testing negation:"
if [[ ! "apple" == "orange" ]]; then
    echo "apple is NOT equal to orange"
fi

if [[ ! -z "non-empty" ]]; then
    echo "string is NOT empty"
fi

# Test parentheses for grouping
echo "Testing parentheses grouping:"
if [[ ( "a" == "a" ) && ( "b" == "b" ) ]]; then
    echo "Grouped conditions: (a=a) AND (b=b)"
fi

if [[ ( 1 -eq 1 || 2 -eq 3 ) && 3 -eq 3 ]]; then
    echo "Complex grouping: (1=1 OR 2=3) AND 3=3"
fi

# Test variable handling (no word splitting)
echo "Testing variable handling:"
var="hello world"
if [[ $var == "hello world" ]]; then
    echo "Variable with spaces handled correctly"
fi

# Test empty variable handling
echo "Testing empty variables:"
empty=""
if [[ -z $empty ]]; then
    echo "Empty variable detected correctly"
fi

if [[ -n "non-empty" ]]; then
    echo "Non-empty string detected correctly"
fi

# Test numeric comparisons
echo "Testing numeric comparisons:"
if [[ 10 -gt 5 ]]; then
    echo "10 > 5 (numeric)"
fi

if [[ 3 -le 3 ]]; then
    echo "3 <= 3 (numeric)"
fi

# Test file operations (same as [ ])
echo "Testing file operations:"
touch tmp_test_file
if [[ -f tmp_test_file ]]; then
    echo "File exists test works in [[ ]]"
fi

if [[ -r tmp_test_file ]]; then
    echo "File is readable"
fi

rm -f tmp_test_file

# Test case sensitivity
echo "Testing case sensitivity:"
if [[ "Hello" != "hello" ]]; then
    echo "Case sensitive comparison: Hello != hello"
fi

# Test special characters in patterns
echo "Testing special characters:"
if [[ "test[1]" == "test[1]" ]]; then
    echo "Literal brackets matched"
fi

if [[ "file-name" == *-* ]]; then
    echo "Dash in filename matched"
fi

# Test multiple conditions
echo "Testing multiple conditions:"
age=25
name="John"
if [[ $age -ge 18 && $name =~ ^[A-Z][a-z]+$ ]]; then
    echo "Adult with properly formatted name"
fi

# Test complex regex patterns
echo "Testing complex regex patterns:"
phone="123-456-7890"
if [[ $phone =~ ^[0-9]{3}-[0-9]{3}-[0-9]{4}$ ]]; then
    echo "Valid phone number format"
fi

# Test wildcard vs regex distinction
echo "Testing wildcard vs regex distinction:"
if [[ "test.txt" == *.txt ]]; then
    echo "Wildcard match: *.txt"
fi

if [[ "test.txt" =~ .*\.txt$ ]]; then
    echo "Regex match: .*\\.txt$"
fi

# Test error conditions
echo "Testing error conditions:"
if [[ -f /nonexistent/file ]]; then
    echo "This should not print"
else
    echo "Nonexistent file correctly detected"
fi

# Test arithmetic in test
echo "Testing arithmetic in test:"
if [[ $((2 + 3)) -eq 5 ]]; then
    echo "Arithmetic in test: 2 + 3 = 5"
fi

# Test command substitution in test
echo "Testing command substitution:"
if [[ $(echo "test") == "test" ]]; then
    echo "Command substitution in test works"
fi

# Test array-like behavior with variables
echo "Testing with multiple words:"
words="one two three"
if [[ $words =~ two ]]; then
    echo "Found 'two' in words"
fi

# Test quote handling
echo "Testing quote handling:"
if [[ "quoted string" == "quoted string" ]]; then
    echo "Quoted strings match correctly"
fi

if [[ 'single quotes' == 'single quotes' ]]; then
    echo "Single quoted strings match correctly"
fi

echo "Enhanced test operators test completed"