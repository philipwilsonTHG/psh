# Test interactive vs non-interactive script modes
# PSH behaves differently in interactive and non-interactive modes

echo "Testing script execution modes:"

# Create test scripts for different modes
mkdir -p tmp/modes_test

# Test script that checks if running interactively
cat > tmp/modes_test/interactive_check.sh << 'EOF'
#!/bin/sh
echo "Testing interactive mode detection:"

# Check various methods of detecting interactive mode
if [ -t 0 ]; then
    echo "stdin is a terminal"
else
    echo "stdin is not a terminal"
fi

if [ -t 1 ]; then
    echo "stdout is a terminal"
else
    echo "stdout is not a terminal"
fi

# Check PS1 variable (often set in interactive shells)
if [ -n "$PS1" ]; then
    echo "PS1 is set: $PS1"
else
    echo "PS1 is not set"
fi

# Check BASH_VERSION or similar shell-specific variables
echo "Shell info: ${0##*/}"
EOF
chmod +x tmp/modes_test/interactive_check.sh

# Execute in non-interactive mode (normal script execution)
echo "Non-interactive execution:"
tmp/modes_test/interactive_check.sh

# Test script behavior with different input sources
echo "Testing input source handling:"
cat > tmp/modes_test/input_test.sh << 'EOF'
#!/bin/sh
echo "Input test script"
echo "Reading line from input:"
read line
echo "Read: [$line]"
echo "Script completed"
EOF
chmod +x tmp/modes_test/input_test.sh

# Test with piped input
echo "With piped input:"
echo "test input line" | tmp/modes_test/input_test.sh

# Test with here document
echo "With here document:"
tmp/modes_test/input_test.sh << 'EOF'
here document input
EOF

# Test script exit behavior
echo "Testing exit behavior in different modes:"
cat > tmp/modes_test/exit_test.sh << 'EOF'
#!/bin/sh
echo "Before exit"
exit 42
echo "After exit (should not print)"
EOF
chmod +x tmp/modes_test/exit_test.sh

tmp/modes_test/exit_test.sh
echo "Exit test return code: $?"

# Test error handling modes
echo "Testing error handling:"
cat > tmp/modes_test/error_test.sh << 'EOF'
#!/bin/sh
echo "Testing error handling"
set -e  # Exit on error
echo "Before error"
false   # Command that fails
echo "After error (should not print with set -e)"
EOF
chmod +x tmp/modes_test/error_test.sh

tmp/modes_test/error_test.sh
echo "Error test return code: $?"

# Test script with errexit disabled
cat > tmp/modes_test/no_errexit.sh << 'EOF'
#!/bin/sh
echo "Testing without errexit"
echo "Before error"
false   # Command that fails
echo "After error (should print without set -e)"
EOF
chmod +x tmp/modes_test/no_errexit.sh

tmp/modes_test/no_errexit.sh
echo "No errexit return code: $?"

# Test script that uses job control features
echo "Testing job control in scripts:"
cat > tmp/modes_test/job_test.sh << 'EOF'
#!/bin/sh
echo "Job control test"

# Background job
sleep 0.1 &
bg_pid=$!
echo "Started background job: $bg_pid"

# Wait for background job
wait $bg_pid
echo "Background job completed: $?"

# Test job control availability
if jobs 2>/dev/null; then
    echo "Job control available"
else
    echo "Job control not available in script mode"
fi
EOF
chmod +x tmp/modes_test/job_test.sh

tmp/modes_test/job_test.sh

# Test signal handling in scripts
echo "Testing signal handling:"
cat > tmp/modes_test/signal_test.sh << 'EOF'
#!/bin/sh
echo "Signal handling test"

# Set up signal handler
trap 'echo "Received SIGTERM"; exit 0' TERM
trap 'echo "Received SIGINT"; exit 0' INT

echo "Script PID: $$"
echo "Sleeping for a short time..."
sleep 0.1
echo "Sleep completed normally"
EOF
chmod +x tmp/modes_test/signal_test.sh

tmp/modes_test/signal_test.sh

# Test script with command line options
echo "Testing script option handling:"
cat > tmp/modes_test/options_test.sh << 'EOF'
#!/bin/sh
echo "Options test script"

# Check if running with various shell options
if set -o | grep -q "xtrace.*on" 2>/dev/null; then
    echo "xtrace is on"
else
    echo "xtrace is off"
fi

if set -o | grep -q "errexit.*on" 2>/dev/null; then
    echo "errexit is on"
else
    echo "errexit is off"
fi

# Demonstrate option effects
echo "Setting xtrace on:"
set -x
echo "This should show the command being executed"
set +x
echo "xtrace turned off"
EOF
chmod +x tmp/modes_test/options_test.sh

tmp/modes_test/options_test.sh

# Test script environment variables
echo "Testing script environment:"
cat > tmp/modes_test/env_test.sh << 'EOF'
#!/bin/sh
echo "Environment test"
echo "SHELL: $SHELL"
echo "PATH: ${PATH:0:50}..."
echo "HOME: $HOME"
echo "USER: $USER"
echo "PWD: $PWD"

# Test script-specific variables
echo "Script variables:"
echo "Script name: $0"
echo "Script directory: $(dirname "$0")"
echo "Current directory: $(pwd)"
EOF
chmod +x tmp/modes_test/env_test.sh

# Execute from different locations
echo "From current directory:"
tmp/modes_test/env_test.sh

echo "From script directory:"
cd tmp/modes_test && ./env_test.sh && cd ../..

# Test script with functions
echo "Testing function definitions in scripts:"
cat > tmp/modes_test/func_test.sh << 'EOF'
#!/bin/sh
echo "Function test script"

# Define functions
test_func() {
    echo "Function called with: $*"
    return 0
}

recursive_func() {
    local count=$1
    echo "Recursive call: $count"
    if [ $count -gt 1 ]; then
        recursive_func $((count - 1))
    fi
}

# Call functions
test_func "hello" "world"
recursive_func 3
EOF
chmod +x tmp/modes_test/func_test.sh

tmp/modes_test/func_test.sh

# Test script with here documents
echo "Testing here documents in scripts:"
cat > tmp/modes_test/heredoc_test.sh << 'EOF'
#!/bin/sh
echo "Here document test"

cat << 'HEREDOC_END'
This is a here document
with multiple lines
and $variables that are not expanded
HEREDOC_END

echo "With variable expansion:"
name="World"
cat << HEREDOC_END
Hello $name
Current time: $(date)
HEREDOC_END
EOF
chmod +x tmp/modes_test/heredoc_test.sh

tmp/modes_test/heredoc_test.sh

# Test script resource handling
echo "Testing resource handling:"
cat > tmp/modes_test/resource_test.sh << 'EOF'
#!/bin/sh
echo "Resource test"

# Test file operations
echo "Creating temporary file"
temp_file="tmp_file_$$"
echo "test content" > $temp_file

echo "Reading file:"
cat $temp_file

echo "Cleaning up:"
rm -f $temp_file
echo "File removed"
EOF
chmod +x tmp/modes_test/resource_test.sh

tmp/modes_test/resource_test.sh

# Cleanup
rm -rf tmp/modes_test

echo "Script modes test completed"