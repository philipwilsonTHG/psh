# Test source command and PATH-based script execution
# PSH supports sourcing scripts and PATH resolution

echo "Testing source command and PATH resolution:"

# Setup test environment
mkdir -p tmp/source_test/bin
mkdir -p tmp/source_test/lib

# Create scripts to source
cat > tmp/source_test/lib/functions.sh << 'EOF'
# Shared function library
greet() {
    echo "Hello from sourced function: $1"
}

add_numbers() {
    echo $(($1 + $2))
}

# Set some variables
SOURCED_VAR="value from sourced script"
COUNTER=42
EOF

cat > tmp/source_test/lib/config.sh << 'EOF'
# Configuration file
CONFIG_HOST="localhost"
CONFIG_PORT=8080
CONFIG_DEBUG=true

show_config() {
    echo "Host: $CONFIG_HOST"
    echo "Port: $CONFIG_PORT"
    echo "Debug: $CONFIG_DEBUG"
}
EOF

# Test basic source command
echo "Testing basic source command:"
source tmp/source_test/lib/functions.sh
echo "After sourcing functions.sh:"
echo "SOURCED_VAR: $SOURCED_VAR"
echo "COUNTER: $COUNTER"
greet "world"
echo "5 + 3 = $(add_numbers 5 3)"

# Test source with dot command
echo "Testing dot (.) command:"
. tmp/source_test/lib/config.sh
echo "After sourcing config.sh:"
show_config

# Test source with relative paths
echo "Testing relative path sourcing:"
cd tmp/source_test
source lib/functions.sh
echo "Sourced from relative path - COUNTER: $COUNTER"
cd ../..

# Test source with arguments
echo "Testing source with arguments:"
cat > tmp/source_test/lib/with_args.sh << 'EOF'
echo "Sourced script received arguments:"
echo "Script name: $0"
echo "Argument count: $#"
echo "Arguments: $*"
echo "First arg: $1"
echo "Second arg: $2"

if [ -n "$1" ]; then
    MESSAGE="Configured with: $1"
else
    MESSAGE="No configuration provided"
fi
EOF

source tmp/source_test/lib/with_args.sh arg1 arg2 arg3
echo "MESSAGE set by sourced script: $MESSAGE"

# Test sourcing script that sources another script
echo "Testing nested sourcing:"
cat > tmp/source_test/lib/nested1.sh << 'EOF'
echo "In nested1.sh"
NESTED1_VAR="from nested1"
source tmp/source_test/lib/nested2.sh
echo "Back in nested1.sh, NESTED2_VAR: $NESTED2_VAR"
EOF

cat > tmp/source_test/lib/nested2.sh << 'EOF'
echo "In nested2.sh"
NESTED2_VAR="from nested2"
echo "nested1 variable: $NESTED1_VAR"
EOF

source tmp/source_test/lib/nested1.sh

# Test PATH-based script execution
echo "Testing PATH-based script execution:"

# Add our bin directory to PATH
export PATH="$(pwd)/tmp/source_test/bin:$PATH"

# Create a script in the PATH
cat > tmp/source_test/bin/myscript << 'EOF'
#!/bin/sh
echo "Script executed from PATH"
echo "Script location: $0"
echo "Arguments: $*"
EOF
chmod +x tmp/source_test/bin/myscript

# Execute using PATH
echo "Executing script via PATH:"
myscript path_arg1 path_arg2

# Test which command
echo "Testing which command:"
if command -v which >/dev/null; then
    which myscript
else
    echo "which command not available"
fi

# Test command -v
echo "Testing command -v:"
command -v myscript

# Create another script to test PATH precedence
cat > tmp/source_test/bin/testcmd << 'EOF'
#!/bin/sh
echo "testcmd from tmp/source_test/bin"
EOF
chmod +x tmp/source_test/bin/testcmd

# Add another directory to PATH
mkdir -p tmp/source_test/bin2
cat > tmp/source_test/bin2/testcmd << 'EOF'
#!/bin/sh
echo "testcmd from tmp/source_test/bin2"
EOF
chmod +x tmp/source_test/bin2/testcmd

export PATH="$(pwd)/tmp/source_test/bin2:$PATH"

echo "Testing PATH precedence:"
testcmd

# Test sourcing with different return values
echo "Testing source return values:"
cat > tmp/source_test/lib/return_test.sh << 'EOF'
echo "Script with return value"
if [ "$1" = "fail" ]; then
    echo "Returning failure"
    return 1
else
    echo "Returning success"
    return 0
fi
EOF

source tmp/source_test/lib/return_test.sh success
echo "Source return code (success): $?"

source tmp/source_test/lib/return_test.sh fail
echo "Source return code (failure): $?"

# Test source error handling
echo "Testing source error handling:"
source tmp/source_test/lib/nonexistent.sh 2>/dev/null
echo "Source nonexistent file exit code: $?"

# Test source with special characters in filename
echo "Testing source with special filenames:"
cat > 'tmp/source_test/lib/file with spaces.sh' << 'EOF'
echo "Sourced file with spaces in name"
SPACED_VAR="success"
EOF

source 'tmp/source_test/lib/file with spaces.sh'
echo "SPACED_VAR: $SPACED_VAR"

# Test source environment inheritance
echo "Testing environment inheritance:"
export PARENT_VAR="from parent"
cat > tmp/source_test/lib/env_test.sh << 'EOF'
echo "Parent variable in sourced script: $PARENT_VAR"
CHILD_VAR="from child"
export NEW_EXPORT="exported from sourced script"
EOF

source tmp/source_test/lib/env_test.sh
echo "Child variable in parent: $CHILD_VAR"
echo "Exported variable in parent: $NEW_EXPORT"

# Test source in subshell
echo "Testing source in subshell:"
(
    source tmp/source_test/lib/functions.sh
    echo "In subshell - SOURCED_VAR: $SOURCED_VAR"
    greet "subshell"
)
echo "After subshell - SOURCED_VAR still available: $SOURCED_VAR"

# Restore original PATH
export PATH="${PATH#$(pwd)/tmp/source_test/bin2:}"
export PATH="${PATH#$(pwd)/tmp/source_test/bin:}"

# Cleanup
rm -rf tmp/source_test

echo "Source and PATH test completed"