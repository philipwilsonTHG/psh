# Test wait builtin functionality
# PSH supports wait builtin for process synchronization (v0.57.4 feature)

# Test wait with specific PID
echo "Testing wait with specific PID:"
true &
sleep_pid=$!
echo "Started background job"
wait $sleep_pid
echo "Wait for specific PID completed, status: $?"

# Test wait with multiple PIDs
echo "Testing wait with multiple PIDs:"
true &
pid1=$!
true &
pid2=$!
echo "Started two background jobs"
wait $pid1 $pid2
echo "Wait for multiple PIDs completed, status: $?"

# Test wait with no arguments (wait for all)
echo "Testing wait with no arguments:"
true &
true &
true &
echo "Started 3 background jobs"
wait
echo "Wait for all jobs completed"

# Test wait with non-existent PID
echo "Testing wait with non-existent PID:"
wait 99999 2>/dev/null
echo "Wait for non-existent PID completed, status: $?"

# Test wait with job that fails
echo "Testing wait with failing job:"
false &
false_pid=$!
echo "Started failing job"
wait $false_pid
echo "Wait for failing job completed, status: $?"

# Test wait in pipeline context
echo "Testing wait in pipeline:"
(echo "pipeline test" | cat) &
pipe_pid=$!
wait $pipe_pid
echo "Pipeline wait completed"

# Test wait with command substitution
echo "Testing wait with command substitution background job:"
(echo "command substitution background") &
cmd_sub_pid=$!
result=$(wait $cmd_sub_pid; echo "wait completed")
echo "Result: $result"

# Test wait behavior when no background jobs exist
echo "Testing wait when no background jobs exist:"
wait 2>/dev/null
echo "Wait with no jobs completed, status: $?"

# Test sequential waits
echo "Testing sequential waits:"
true &
first_pid=$!
true &
second_pid=$!

echo "Waiting for first job..."
wait $first_pid
echo "First job completed, status: $?"

echo "Waiting for second job..."
wait $second_pid
echo "Second job completed, status: $?"

echo "Wait builtin test completed"