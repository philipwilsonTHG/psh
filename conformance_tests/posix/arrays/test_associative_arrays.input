# Test associative array support
# PSH supports bash-style associative arrays with declare -A

echo "Testing associative arrays:"

# Test basic associative array declaration and assignment
echo "Testing basic associative operations:"
declare -A assoc_array

assoc_array["key1"]="value1"
assoc_array["key2"]="value2"
assoc_array["key3"]="value3"

echo "assoc_array[key1]: ${assoc_array[key1]}"
echo "assoc_array[key2]: ${assoc_array[key2]}"
echo "assoc_array[key3]: ${assoc_array[key3]}"

# Test associative array initialization
echo "Testing associative array initialization:"
declare -A colors=([red]="#FF0000" [green]="#00FF00" [blue]="#0000FF")

echo "colors[red]: ${colors[red]}"
echo "colors[green]: ${colors[green]}"
echo "colors[blue]: ${colors[blue]}"

# Test accessing all values and keys (order-independent)
echo "Testing array expansion:"
# Sort values and keys for consistent output across implementations
sorted_values=($(printf '%s\n' "${colors[@]}" | sort))
sorted_keys=($(printf '%s\n' "${!colors[@]}" | sort))
echo "All values: ${sorted_values[@]}"
echo "All keys: ${sorted_keys[@]}"

# Test array length
echo "Testing array length:"
echo "Length of colors: ${#colors[@]}"
echo "Length of assoc_array: ${#assoc_array[@]}"

# Test string keys with spaces and special characters
echo "Testing special keys:"
declare -A special_keys

special_keys["key with spaces"]="spaced value"
special_keys["key-with-dashes"]="dashed value"
special_keys["key_with_underscores"]="underscore value"
special_keys["key.with.dots"]="dotted value"
special_keys["key@symbol"]="symbol value"

echo "Key with spaces: ${special_keys[key with spaces]}"
echo "Key with dashes: ${special_keys[key-with-dashes]}"
echo "Key with underscores: ${special_keys[key_with_underscores]}"
echo "Key with dots: ${special_keys[key.with.dots]}"
echo "Key with symbol: ${special_keys[key@symbol]}"

# Test accessing all special keys (order-independent)
sorted_special_keys=($(printf '%s\n' "${!special_keys[@]}" | sort))
sorted_special_values=($(printf '%s\n' "${special_keys[@]}" | sort))
echo "All special keys: ${sorted_special_keys[@]}"
echo "All special values: ${sorted_special_values[@]}"

# Test key modification and deletion
echo "Testing key modification:"
config=()
declare -A config
config["host"]="localhost"
config["port"]="8080"
config["debug"]="true"

# Sort config output for order-independence
sorted_config_values=($(printf '%s\n' "${config[@]}" | sort))
sorted_config_keys=($(printf '%s\n' "${!config[@]}" | sort))
echo "Original config: ${sorted_config_values[@]}"
echo "Config keys: ${sorted_config_keys[@]}"

# Modify existing key
config["port"]="9090"
echo "After port change: ${config[port]}"

# Add new key
config["ssl"]="false"
sorted_config_ssl=($(printf '%s\n' "${config[@]}" | sort))
echo "After adding ssl: ${sorted_config_ssl[@]}"

# Delete a key
unset config["debug"]
sorted_config_final=($(printf '%s\n' "${config[@]}" | sort))
sorted_keys_final=($(printf '%s\n' "${!config[@]}" | sort))
echo "After removing debug: ${sorted_config_final[@]}"
echo "Keys after removal: ${sorted_keys_final[@]}"

# Test complex key expressions
echo "Testing complex keys:"
declare -A complex

var1="dynamic"
var2="key"
complex["${var1}_${var2}"]="dynamic value"
complex["$(echo computed)"]="computed value"

echo "Dynamic key: ${complex[dynamic_key]}"
echo "Computed key: ${complex[computed]}"

# Test associative array in loops (order-independent)
echo "Testing associative array iteration:"
declare -A fruits=([apple]="red" [banana]="yellow" [grape]="purple" [orange]="orange")

echo "Iterating over values:"
# Sort values for consistent output
sorted_fruit_values=($(printf '%s\n' "${fruits[@]}" | sort))
for fruit_color in "${sorted_fruit_values[@]}"; do
    echo "  Color: $fruit_color"
done

echo "Iterating over keys:"
# Sort keys for consistent output
sorted_fruit_keys=($(printf '%s\n' "${!fruits[@]}" | sort))
for fruit_name in "${sorted_fruit_keys[@]}"; do
    echo "  Fruit: $fruit_name"
done

echo "Iterating over key-value pairs:"
# Sort keys then iterate
for fruit in "${sorted_fruit_keys[@]}"; do
    echo "  $fruit is ${fruits[$fruit]}"
done

# Test nested-like behavior with concatenated keys
echo "Testing pseudo-nested arrays:"
declare -A nested

nested["user.name"]="john"
nested["user.email"]="john@example.com"
nested["user.age"]="30"
nested["config.debug"]="true"
nested["config.verbose"]="false"

echo "User info:"
echo "  Name: ${nested[user.name]}"
echo "  Email: ${nested[user.email]}"
echo "  Age: ${nested[user.age]}"

echo "Config info:"
echo "  Debug: ${nested[config.debug]}"
echo "  Verbose: ${nested[config.verbose]}"

# Test key existence checking
echo "Testing key existence:"
declare -A test_exist=([exists]="yes" [another]="value")

if [[ -v test_exist[exists] ]]; then
    echo "Key 'exists' is set"
else
    echo "Key 'exists' is not set"
fi

if [[ -v test_exist[missing] ]]; then
    echo "Key 'missing' is set"
else
    echo "Key 'missing' is not set"
fi

# Test with empty values
echo "Testing empty values:"
declare -A with_empty
with_empty["empty_key"]=""
with_empty["null_key"]=""
with_empty["normal_key"]="normal value"

echo "Empty key: [${with_empty[empty_key]}]"
echo "Null key: [${with_empty[null_key]}]"
echo "Normal key: [${with_empty[normal_key]}]"
# Sort keys for consistent output
sorted_empty_keys=($(printf '%s\n' "${!with_empty[@]}" | sort))
echo "All keys: ${sorted_empty_keys[@]}"

# Test array copying and assignment
echo "Testing array copying:"
declare -A original=([a]="1" [b]="2" [c]="3")
declare -A copy

# Copy elements manually (bash doesn't support direct associative array copying)
for key in "${!original[@]}"; do
    copy["$key"]="${original[$key]}"
done

# Sort outputs for consistent order
sorted_original=($(printf '%s\n' "${original[@]}" | sort))
sorted_copy=($(printf '%s\n' "${copy[@]}" | sort))
echo "Original: ${sorted_original[@]}"
echo "Copy: ${sorted_copy[@]}"

# Modify copy to verify independence
copy["b"]="modified"
echo "After modifying copy:"
sorted_original_after=($(printf '%s\n' "${original[@]}" | sort))
sorted_copy_after=($(printf '%s\n' "${copy[@]}" | sort))
echo "Original: ${sorted_original_after[@]}"
echo "Copy: ${sorted_copy_after[@]}"

# Test associative arrays with functions
echo "Testing associative arrays in functions:"
process_assoc_array() {
    local -A local_array=([func_key1]="func_val1" [func_key2]="func_val2")
    # Sort local array outputs
    local sorted_local_values=($(printf '%s\n' "${local_array[@]}" | sort))
    local sorted_local_keys=($(printf '%s\n' "${!local_array[@]}" | sort))
    echo "Local associative array: ${sorted_local_values[@]}"
    echo "Local keys: ${sorted_local_keys[@]}"
    
    # Access global associative array
    local sorted_global_values=($(printf '%s\n' "${global_assoc[@]}" | sort))
    echo "Global array from function: ${sorted_global_values[@]}"
}

declare -A global_assoc=([global1]="value1" [global2]="value2")
# Sort global array output
sorted_global_before=($(printf '%s\n' "${global_assoc[@]}" | sort))
echo "Before function call: ${sorted_global_before[@]}"
process_assoc_array

# Test associative array with numeric-like keys
echo "Testing numeric-like string keys:"
declare -A numeric_keys
numeric_keys["1"]="first"
numeric_keys["2"]="second"
numeric_keys["10"]="tenth"
numeric_keys["01"]="zero-one"

echo "Key '1': ${numeric_keys[1]}"
echo "Key '2': ${numeric_keys[2]}"
echo "Key '10': ${numeric_keys[10]}"
echo "Key '01': ${numeric_keys[01]}"
# Sort numeric keys for consistent output
sorted_numeric_keys=($(printf '%s\n' "${!numeric_keys[@]}" | sort))
echo "All numeric keys: ${sorted_numeric_keys[@]}"

# Test case sensitivity
echo "Testing case sensitivity:"
declare -A case_test
case_test["Key"]="uppercase K"
case_test["key"]="lowercase k"
case_test["KEY"]="all uppercase"

echo "Key: ${case_test[Key]}"
echo "key: ${case_test[key]}"
echo "KEY: ${case_test[KEY]}"

# Test error conditions
echo "Testing error handling:"
declare -A error_test=([good]="value")

echo "Valid key: ${error_test[good]}"
echo "Invalid key: ${error_test[nonexistent]}"

# Test array clearing
echo "Testing array clearing:"
declare -A to_clear=([clear1]="value1" [clear2]="value2")
echo "Before clearing: ${to_clear[@]}"
unset to_clear
echo "After unset: ${to_clear[@]}"

# Test mixed key types
echo "Testing mixed key types:"
declare -A mixed
mixed["string_key"]="string value"
mixed["123"]="numeric string key"
mixed[""]="empty key"

echo "String key: ${mixed[string_key]}"
echo "Numeric string key: ${mixed[123]}"
echo "Empty key: ${mixed[]}"
# Sort mixed keys for consistent output
sorted_mixed_keys=($(printf '%s\n' "${!mixed[@]}" | sort))
echo "All mixed keys: ${sorted_mixed_keys[@]}"

echo "Associative arrays test completed"