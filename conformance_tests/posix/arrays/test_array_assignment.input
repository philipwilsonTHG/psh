# Test array assignment methods and initialization
# PSH supports various array assignment and initialization patterns

echo "Testing array assignment methods:"

# Test basic element assignment
echo "Testing basic element assignment:"
basic_array[0]="first"
basic_array[1]="second"  
basic_array[2]="third"

echo "Basic array: ${basic_array[@]}"
echo "Element count: ${#basic_array[@]}"

# Test array initialization with parentheses
echo "Testing parentheses initialization:"
parentheses_array=("apple" "banana" "cherry")
echo "Parentheses array: ${parentheses_array[@]}"

# Test array initialization with explicit indices
echo "Testing explicit index initialization:"
explicit_array=([0]="zero" [2]="two" [5]="five")
echo "Explicit array: ${explicit_array[@]}"
echo "Indices: ${!explicit_array[@]}"

# Test mixed initialization
echo "Testing mixed initialization:"
mixed_init=("first" [3]="fourth" "fifth" [10]="eleventh")
echo "Mixed array: ${mixed_init[@]}"
echo "Mixed indices: ${!mixed_init[@]}"

# Test array assignment from command output
echo "Testing assignment from command output:"
date_parts=($(echo "2025 06 25 12 00 00"))
echo "Date parts: ${date_parts[@]}"
echo "Year: ${date_parts[0]}, Month: ${date_parts[1]}, Day: ${date_parts[2]}"

# Test array assignment from string splitting
echo "Testing string splitting assignment:"
csv_data="apple,banana,cherry,date,elderberry"
IFS=',' read -ra fruit_array <<< "$csv_data"
echo "Fruit array from CSV: ${fruit_array[@]}"

# Test array assignment with whitespace splitting
echo "Testing whitespace splitting:"
space_data="one two three four five"
space_array=($space_data)
echo "Space array: ${space_array[@]}"

# Test array assignment with variable expansion
echo "Testing variable expansion in assignment:"
prefix="item"
suffix="data"
expanded_array=("${prefix}_1" "${prefix}_2" "${suffix}_a" "${suffix}_b")
echo "Expanded array: ${expanded_array[@]}"

# Test array assignment with command substitution
echo "Testing command substitution assignment:"
command_array=($(echo "cmd1 cmd2 cmd3") "literal" $(echo "cmd4"))
echo "Command array: ${command_array[@]}"

# Test array assignment with glob patterns
echo "Testing glob pattern assignment:"
mkdir -p tmp/glob_test
touch tmp/glob_test/file1.txt tmp/glob_test/file2.txt tmp/glob_test/file3.log

echo "Files created for glob test"
glob_array=(tmp/glob_test/*.txt)
echo "Glob array (.txt files): ${glob_array[@]}"

all_files=(tmp/glob_test/*)
echo "All files: ${all_files[@]}"

# Test array assignment with brace expansion
echo "Testing brace expansion assignment:"
brace_array=({a..e} {1..3})
echo "Brace expansion array: ${brace_array[@]}"

sequence_array=({10..15} {20..22})
echo "Sequence array: ${sequence_array[@]}"

# Test array assignment with quote handling
echo "Testing quote handling in assignment:"
quote_array=("single word" 'another word' "word with \"quotes\"" 'word with '\''quotes')
echo "Quote array: ${quote_array[@]}"

# Test array assignment with special characters
echo "Testing special characters:"
special_array=("file.txt" "dir/file" "name with spaces" "symbol@file" "dash-file" "under_score")
echo "Special array: ${special_array[@]}"

# Test array assignment with empty elements
echo "Testing empty elements:"
empty_array=("first" "" "third" "" "fifth")
echo "Array with empty elements: ${empty_array[@]}"
echo "Element count: ${#empty_array[@]}"
echo "Second element (empty): [${empty_array[1]}]"

# Test array appending
echo "Testing array appending:"
append_array=("initial")
echo "Initial: ${append_array[@]}"

append_array+=("second")
echo "After appending 'second': ${append_array[@]}"

append_array+=("third" "fourth")
echo "After appending multiple: ${append_array[@]}"

# Test array appending with other arrays
echo "Testing array concatenation:"
first_array=(1 2 3)
second_array=(4 5 6)
first_array+=(${second_array[@]})
echo "Concatenated array: ${first_array[@]}"

# Test array assignment in loops
echo "Testing assignment in loops:"
loop_array=()
for i in {1..5}; do
    loop_array+=("item_$i")
done
echo "Loop-built array: ${loop_array[@]}"

# Test array assignment with calculation
echo "Testing calculated assignment:"
calc_array=()
for ((i=1; i<=5; i++)); do
    calc_array[i-1]=$((i * i))
done
echo "Calculated array (squares): ${calc_array[@]}"

# Test array assignment with conditional logic
echo "Testing conditional assignment:"
conditional_array=()
for num in {1..10}; do
    if ((num % 2 == 0)); then
        conditional_array+=("even_$num")
    else
        conditional_array+=("odd_$num")
    fi
done
echo "Conditional array: ${conditional_array[@]}"

# Test array assignment from file content
echo "Testing assignment from file:"
echo -e "line1\nline2\nline3\nline4" > tmp/test_lines.txt

# Read lines into array
mapfile -t file_array < tmp/test_lines.txt 2>/dev/null || {
    # Fallback method if mapfile not available
    file_array=()
    while IFS= read -r line; do
        file_array+=("$line")
    done < tmp/test_lines.txt
}
echo "File array: ${file_array[@]}"

# Test array assignment with parameter expansion
echo "Testing parameter expansion assignment:"
base_name="test"
param_array=("${base_name}" "${base_name}_modified" "${base_name^^}" "${base_name,,}")
echo "Parameter array: ${param_array[@]}"

# Test array assignment with arithmetic expansion
echo "Testing arithmetic expansion assignment:"
math_array=($(( 2 + 3 )) $(( 10 - 4 )) $(( 3 * 7 )) $(( 20 / 4 )))
echo "Math array: ${math_array[@]}"

# Test array assignment with process substitution
echo "Testing process substitution assignment:"
if command -v sort >/dev/null; then
    process_array=($(echo -e "zebra\napple\nbanana" | sort))
    echo "Process substitution array (sorted): ${process_array[@]}"
fi

# Test sparse array assignment
echo "Testing sparse array assignment:"
sparse_assign=()
sparse_assign[1]="one"
sparse_assign[5]="five"
sparse_assign[100]="hundred"

echo "Sparse assignment: ${sparse_assign[@]}"
echo "Sparse indices: ${!sparse_assign[@]}"
echo "Sparse length: ${#sparse_assign[@]}"

# Test array assignment with here strings
echo "Testing here string assignment:"
here_string_array=($(cat <<< "word1 word2 word3"))
echo "Here string array: ${here_string_array[@]}"

# Test array assignment with different IFS
echo "Testing custom IFS assignment:"
old_ifs="$IFS"
custom_data="apple:banana:cherry:date"
IFS=':' read -ra custom_array <<< "$custom_data"
echo "Custom IFS array: ${custom_array[@]}"
IFS="$old_ifs"

# Test array assignment with escaping
echo "Testing escaped characters:"
escaped_array=("escaped\ space" "tab\there" "newline\nhere" "quote\"here")
echo "Escaped array: ${escaped_array[@]}"

# Test array assignment overwriting
echo "Testing array overwriting:"
overwrite_array=(1 2 3 4 5)
echo "Original: ${overwrite_array[@]}"

overwrite_array=(a b c)
echo "After overwrite: ${overwrite_array[@]}"

# Test partial array assignment
echo "Testing partial assignment:"
partial_array=(1 2 3 4 5)
echo "Before partial: ${partial_array[@]}"

partial_array[2]="modified"
partial_array[6]="added"
echo "After partial: ${partial_array[@]}"
echo "Indices: ${!partial_array[@]}"

# Test array assignment in functions
echo "Testing assignment in functions:"
assign_in_function() {
    local local_array=("func1" "func2" "func3")
    echo "Local array in function: ${local_array[@]}"
    
    # Modify global array
    global_assign_array+=("from_function")
}

global_assign_array=("initial" "values")
echo "Before function: ${global_assign_array[@]}"
assign_in_function
echo "After function: ${global_assign_array[@]}"

# Cleanup
rm -f tmp/test_lines.txt
rm -rf tmp/glob_test

echo "Array assignment test completed"