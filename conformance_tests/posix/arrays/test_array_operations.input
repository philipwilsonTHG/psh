# Test advanced array operations
# PSH supports array slicing, pattern operations, and complex manipulations

echo "Testing advanced array operations:"

# Setup test arrays
numbers=(10 20 30 40 50 60 70 80 90 100)
words=("hello" "world" "test" "array" "operations" "bash" "shell")
mixed=("apple" "123" "test_file.txt" "banana" "456" "config.yaml")

echo "Test arrays:"
echo "numbers: ${numbers[@]}"
echo "words: ${words[@]}"
echo "mixed: ${mixed[@]}"

# Test array slicing
echo "Testing array slicing:"
echo "numbers slice [2:3]: ${numbers[@]:2:3}"
echo "numbers slice [1:2]: ${numbers[@]:1:2}"
echo "numbers slice [5:]: ${numbers[@]:5}"
echo "words slice [0:3]: ${words[@]:0:3}"
echo "words slice [3:]: ${words[@]:3}"

# Test slicing with variables
echo "Testing slicing with variables:"
start=2
length=4
echo "numbers[\$start:\$length] where start=$start, length=$length: ${numbers[@]:$start:$length}"

# Test individual element slicing
echo "Testing element substring operations:"
text="hello_world_test"
arr=("$text" "another_long_string" "short")

echo "Element 0: ${arr[0]}"
echo "Element 0 slice [0:5]: ${arr[0]:0:5}"
echo "Element 0 slice [6:]: ${arr[0]:6}"
echo "Element 1 slice [8:4]: ${arr[1]:8:4}"

# Test pattern substitution in arrays
echo "Testing pattern substitution:"
files=("file1.txt" "file2.log" "file3.txt" "file4.doc" "file5.txt")
echo "Original files: ${files[@]}"

# Replace .txt with .bak
echo "Replace .txt with .bak:"
echo "${files[@]/.txt/.bak}"

# Replace all occurrences
echo "Replace all 'file' with 'document':"
echo "${files[@]/file/document}"

# Pattern removal
echo "Remove .txt extension:"
echo "${files[@]%.txt}"

echo "Remove file prefix:"
echo "${files[@]#file}"

# Test array pattern matching and filtering
echo "Testing pattern matching:"
test_array=("apple.txt" "banana.log" "cherry.txt" "date.doc" "elderberry.txt")
echo "Original test array: ${test_array[@]}"

# Using array expansion with pattern matching
echo "Files ending with .txt:"
for file in "${test_array[@]}"; do
    case "$file" in
        *.txt) echo "  $file" ;;
    esac
done

echo "Files not ending with .txt:"
for file in "${test_array[@]}"; do
    case "$file" in
        *.txt) ;;
        *) echo "  $file" ;;
    esac
done

# Test array concatenation and manipulation
echo "Testing array concatenation:"
first_half=(1 2 3)
second_half=(4 5 6)
combined=(${first_half[@]} ${second_half[@]})
echo "Combined: ${combined[@]}"

# Add elements to beginning and end
prefixed=(0 ${combined[@]})
suffixed=(${prefixed[@]} 7 8)
echo "With prefix and suffix: ${suffixed[@]}"

# Test array sorting (manual approach)
echo "Testing array sorting concepts:"
unsorted=("zebra" "apple" "banana" "cherry" "date")
echo "Unsorted: ${unsorted[@]}"

# Sort using external sort command
sorted_string=$(printf '%s\n' "${unsorted[@]}" | sort | tr '\n' ' ')
read -a sorted <<< "$sorted_string"
echo "Sorted: ${sorted[@]}"

# Test array reversal
echo "Testing array reversal:"
to_reverse=(1 2 3 4 5)
echo "Original: ${to_reverse[@]}"

# Manual reversal
reversed=()
for ((i=${#to_reverse[@]}-1; i>=0; i--)); do
    reversed+=("${to_reverse[i]}")
done
echo "Reversed: ${reversed[@]}"

# Test array deduplication
echo "Testing array deduplication:"
with_duplicates=("apple" "banana" "apple" "cherry" "banana" "date")
echo "With duplicates: ${with_duplicates[@]}"

# Manual deduplication using associative array
declare -A seen
unique=()
for item in "${with_duplicates[@]}"; do
    if [[ ! -v seen["$item"] ]]; then
        seen["$item"]=1
        unique+=("$item")
    fi
done
echo "Unique elements: ${unique[@]}"

# Test array search and filtering
echo "Testing array search:"
search_array=("apple" "application" "apply" "banana" "grape" "grapefruit")
search_term="app"

echo "Array: ${search_array[@]}"
echo "Elements containing '$search_term':"
for element in "${search_array[@]}"; do
    if [[ "$element" == *"$search_term"* ]]; then
        echo "  $element"
    fi
done

# Test array arithmetic operations
echo "Testing array arithmetic:"
values=(10 20 30 40 50)
echo "Values: ${values[@]}"

# Calculate sum
sum=0
for value in "${values[@]}"; do
    sum=$((sum + value))
done
echo "Sum: $sum"

# Calculate average
count=${#values[@]}
average=$((sum / count))
echo "Count: $count, Average: $average"

# Find maximum
max=${values[0]}
for value in "${values[@]}"; do
    if ((value > max)); then
        max=$value
    fi
done
echo "Maximum: $max"

# Test array with complex elements
echo "Testing arrays with complex elements:"
complex=("key=value" "name=John Doe" "age=30" "city=New York")
echo "Complex array: ${complex[@]}"

echo "Parsing key-value pairs:"
for pair in "${complex[@]}"; do
    key="${pair%%=*}"
    value="${pair#*=}"
    echo "  $key -> $value"
done

# Test array intersection
echo "Testing array intersection:"
array1=("apple" "banana" "cherry" "date")
array2=("banana" "date" "elderberry" "fig")

echo "Array 1: ${array1[@]}"
echo "Array 2: ${array2[@]}"

# Find intersection
declare -A set1
for item in "${array1[@]}"; do
    set1["$item"]=1
done

intersection=()
for item in "${array2[@]}"; do
    if [[ -v set1["$item"] ]]; then
        intersection+=("$item")
    fi
done
echo "Intersection: ${intersection[@]}"

# Test array difference
echo "Testing array difference:"
difference=()
for item in "${array1[@]}"; do
    found=false
    for item2 in "${array2[@]}"; do
        if [[ "$item" == "$item2" ]]; then
            found=true
            break
        fi
    done
    if [[ "$found" == false ]]; then
        difference+=("$item")
    fi
done
echo "Array1 - Array2: ${difference[@]}"

# Test array transformation
echo "Testing array transformation:"
lowercase=("hello" "world" "test")
echo "Lowercase: ${lowercase[@]}"

# Convert to uppercase (conceptually)
uppercase=()
for word in "${lowercase[@]}"; do
    # Simulate uppercase conversion
    upper_word=$(echo "$word" | tr '[:lower:]' '[:upper:]')
    uppercase+=("$upper_word")
done
echo "Uppercase: ${uppercase[@]}"

# Test array splitting and joining
echo "Testing array splitting and joining:"
csv_string="apple,banana,cherry,date"
echo "CSV string: $csv_string"

# Split into array (using IFS)
IFS=',' read -ra csv_array <<< "$csv_string"
echo "Split array: ${csv_array[@]}"

# Join back to string
joined=$(IFS=','; echo "${csv_array[*]}")
echo "Joined back: $joined"

# Test multi-dimensional array simulation
echo "Testing multi-dimensional array simulation:"
# Simulate 2D array using naming convention
matrix_0_0="a1"
matrix_0_1="a2"
matrix_1_0="b1"
matrix_1_1="b2"

echo "Matrix [0,0]: $matrix_0_0"
echo "Matrix [0,1]: $matrix_0_1"
echo "Matrix [1,0]: $matrix_1_0"
echo "Matrix [1,1]: $matrix_1_1"

# Using arrays of arrays (array names)
row1=("x1" "x2" "x3")
row2=("y1" "y2" "y3")
matrix_rows=("row1" "row2")

echo "Matrix representation:"
for row_name in "${matrix_rows[@]}"; do
    eval "row=(\"\${${row_name}[@]}\")"
    echo "  $row_name: ${row[@]}"
done

echo "Array operations test completed"