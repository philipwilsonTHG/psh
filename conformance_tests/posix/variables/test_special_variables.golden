Testing special variables:
Testing exit status ($?):
After true command: $? = 0
After false command: $? = 1
After (exit 42): $? = 1
After function returning 7: $? = 7
Testing background process ID ($!):
Background process PID: [deterministic]
$! = [deterministic]
Background process exit status: 0
Testing current process ID ($$):
Main shell PID: [deterministic]
Subshell reported: Subshell PID: [deterministic]
Function PID: [deterministic]
Testing script name ($0):
Script name: psh
Script name in function: script_name_test
Testing parameter count ($#):
Current parameter count: 0
Function parameter count: 4
Function parameters: one two three four
Function parameter count: 0
Function parameters:
Function parameter count: 1
Function parameters: single
Testing positional parameters ($* and $@):
Parameter count: 4
All parameters with $*: apple banana cherry date
All parameters with $@: apple banana cherry date
Testing quoted $* vs $@:
Parameters using "$*": "apple banana cherry date"
Parameters using "$@": "apple banana cherry date"
Iterating with "$@":
  Argument: [apple]
  Argument: [banana]
  Argument: [cherry]
  Argument: [date]
Iterating with "$*":
  Combined: [apple]
  Combined: [banana]
  Combined: [cherry]
  Combined: [date]
Testing $* with custom IFS:
With IFS=',': $* = apple banana cherry date
Testing individual positional parameters:
$1 = apple
$2 = banana
$3 = cherry
$4 = date
$5 =
With 12 parameters:
$9 = p9
${10} = p10
${11} = p11
${12} = p12
Testing OPTIND and OPTARG:
Testing getopts with: -a -c value1 -d value2 remaining args
Initial OPTIND: 1
Option -a found
Current OPTIND: 2, OPTARG:
Option -c with argument: value1
Current OPTIND: 4, OPTARG: value1
Option -d with argument: value2
Current OPTIND: 6, OPTARG: value2
Final OPTIND: 6
Remaining arguments: remaining args
Testing getopts with: -b -c value3 more args
Initial OPTIND: 1
Option -b found
Current OPTIND: 2, OPTARG:
Option -c with argument: value3
Current OPTIND: 4, OPTARG: value3
Final OPTIND: 4
Remaining arguments: more args
Testing special variables in different contexts:
Using $# in arithmetic: $(($# + 1)) = 0
Parameter expansion with $#: ${#} = 12
Testing variable preservation:
Before function - $?: 0
In function - $?: 0, $$: [deterministic], $#: 2
After false in function - $?: 1
After function - $?: 0
Testing special variables in subshells:
Parent $$: [deterministic]
Testing in command substitution:
Command substitution result: Command substitution $$: [deterministic]
Exit status after command substitution: 0
Testing shell-specific variables:
BASH_VERSION: not available
PSH_VERSION: not available
Testing with process substitution:
Process substitution result: Process substitution test
Testing special variable modification:
Original $?: 0
Cannot directly assign to $?
Cannot modify $$: [deterministic]
Testing various exit statuses:
After 'true': $? = 0
After 'false': $? = 1
After '(exit 1)': $? = 1
After '(exit 0)': $? = 1
After '(exit 255)': $? = 1
Testing parameter shifting:
Before shift: $# = 5, $1 = first, $2 = second
After shift 1: $# = 4, $1 = second, $2 = third
After shift 2: $# = 2, $1 = fourth, $2 = fifth
Testing with empty parameters:
With empty params: $# = 3
$1 = [], $2 = [middle], $3 = []
Testing special variables in loops:
Testing LINENO (if available):
Current line number: not available
Testing SECONDS (if available):
Seconds since shell start: not available
Testing RANDOM (if available):
Random number: not available
Special variables test completed
