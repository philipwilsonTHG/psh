Testing variable scoping:
Testing global variables:
global_var: global value
Before function call: global value
global_var in function: global value
global_var modified in function: modified by function
After function call: modified by function
Testing local variables:
global_scope before function: global
global_scope in function (before local): global
local_var: local value
global_scope (shadowed): local shadow
local_var modified: modified local
global_scope after function: global
Testing local variable isolation:
isolated_var in function: function only
isolated_var outside function:
Testing nested function scoping:
Before outer_function: outer value
outer_function - outer_var: outer value
outer_function - outer_local: outer local
inner_function - outer_var: outer value
inner_function - outer_local: outer local
inner_function - inner_local: inner local
after inner_function - outer_var: modified by inner
after inner_function - outer_local: outer local
After outer_function: modified by inner
Testing environment variable inheritance:
ENV_VAR: exported value
Before env function: exported value
ENV_VAR in function: exported value
ENV_VAR modified in function: modified in function
ENV_VAR (local): local env var
After env function: modified in function
Testing subshell scoping:
Before subshell: parent value
In subshell: parent value
Modified in subshell: modified in subshell
new_subshell_var in subshell: created in subshell
After subshell: modified in subshell
new_subshell_var after subshell: created in subshell
Testing export/unexport:
Testing function access:
unexported in function: unexported value
exported in function: exported value
Testing subshell access:
Testing local with export:
local_exported after function:
Testing unset in different scopes:
Before function: global unset test
unset_test_var in function: global unset test
local unset_test_var: local version
after local unset: global unset test
After function: global unset test
Testing readonly scoping:
readonly_global in function: global readonly
Cannot shadow readonly with local
local_readonly: function readonly
readonly_global after function: global readonly
Testing array scoping:
Before function: global1 global2 global3
global_array in function: global1 global2 global3
local_array: (local1 local2 local3)
modified global_array: modified_global1 global2 global3
After function: modified_global1 global2 global3
Testing associative array scoping:
Before function: global1 global2
global_assoc in function: global1 global2
local_assoc: ([lkey1]=local1 [lkey2]=local2)
modified global_assoc: modified_global1 global2
After function: modified_global1 global2
Testing scoping with recursion:
Before recursion: initial
recursive_var at depth 3: depth_3
recursive_var at depth 2: depth_2
recursive_var at depth 1: depth_1
recursive_var returning from depth 1: depth_1
recursive_var returning from depth 2: depth_2
recursive_var returning from depth 3: depth_3
After recursion: initial
Testing parameter scoping:
Global parameters before function: global_arg1 global_arg2 global_arg3
Function parameters:
Parameter count in function: 0
Modified parameters: func_arg1 func_arg2
Parameter count after set: 2
Restored parameters: ()
Global parameters after function: global_arg1 global_arg2 global_arg3
Testing special variable scoping:
Current process ID: [deterministic]
Exit status: 0
Process ID in function: [deterministic]
Exit status in function: 1
Function name: not_available
Exit status after function: 0
Testing scoping with eval:
Before eval function: eval test
Direct eval_var: local eval
Eval eval_var: local eval
eval_created: created by eval
After eval function: eval test
Testing scoping with command substitution:
<command>:110: Parse error at position 0: Expected command
<command>:117: Parse error at position 0: Expected command
<command>:136: Parse error at position 0: Expected command
<command>:140: Parse error at position 176: Expected command
<command>:146: Parse error at position 0: Expected command
psh: local_export_test: command not found
Traceback (most recent call last):
  File "<frozen runpy>", line 198, in _run_module_as_main
  File "<frozen runpy>", line 88, in _run_code
  File "/Users/pwilson/src/psh/psh/__main__.py", line 169, in <module>
    main()
    ~~~~^^
  File "/Users/pwilson/src/psh/psh/__main__.py", line 163, in main
    exit_code = shell.run_command(script_content, add_to_history=False)
  File "/Users/pwilson/src/psh/psh/shell.py", line 391, in run_command
    return self.script_manager.execute_from_source(input_source, add_to_history)
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pwilson/src/psh/psh/scripting/base.py", line 48, in execute_from_source
    return self.source_processor.execute_from_source(input_source, add_to_history)
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pwilson/src/psh/psh/scripting/source_processor.py", line 92, in execute_from_source
    tokens = tokenize(test_command)
  File "/Users/pwilson/src/psh/psh/lexer/__init__.py", line 62, in tokenize
    tokens = lexer.tokenize()
  File "/Users/pwilson/src/psh/psh/lexer/core.py", line 390, in tokenize
    handler()
    ~~~~~~~^^
  File "/Users/pwilson/src/psh/psh/lexer/state_handlers.py", line 71, in handle_word_state
    parts = self._read_word_parts(quote_context=None)
  File "/Users/pwilson/src/psh/psh/lexer/state_handlers.py", line 297, in _read_word_parts
    part = self.parse_variable_or_expansion(quote_context)
  File "/Users/pwilson/src/psh/psh/lexer/core.py", line 117, in parse_variable_or_expansion
    return self._parse_command_or_arithmetic_expansion(start_pos, quote_context)
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pwilson/src/psh/psh/lexer/core.py", line 156, in _parse_command_or_arithmetic_expansion
    content = self.read_balanced_parens()
  File "/Users/pwilson/src/psh/psh/lexer/helpers.py", line 98, in read_balanced_parens
    self._error("Unclosed parenthesis")
    ~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pwilson/src/psh/psh/lexer/core.py", line 330, in _error
    return self.error_handler.handle_error(self, message)
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^
  File "/Users/pwilson/src/psh/psh/lexer/position.py", line 333, in handle_error
    raise error
psh.lexer.position.LexerError:
Lexer Error: Unclosed parenthesis
  at line 1, column 18

>    1 | cmd_sub_result=$(
       |                  ^
