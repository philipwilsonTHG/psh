# Test variable attributes with declare builtin
# PSH supports declare flags for variable attributes (-i, -l, -u, -r, -x, -a, -A)

echo "Testing variable attributes:"

# Test integer attribute (-i)
echo "Testing integer attribute (-i):"
declare -i int_var=10
echo "int_var initial: $int_var"

int_var="20"
echo "int_var after string assignment: $int_var"

int_var=5+3
echo "int_var after arithmetic assignment: $int_var"

int_var="hello"
echo "int_var after invalid assignment: $int_var"

# Test lowercase attribute (-l)
echo "Testing lowercase attribute (-l):"
declare -l lower_var="HELLO WORLD"
echo "lower_var: $lower_var"

lower_var="MiXeD CaSe"
echo "lower_var after assignment: $lower_var"

# Test uppercase attribute (-u) 
echo "Testing uppercase attribute (-u):"
declare -u upper_var="hello world"
echo "upper_var: $upper_var"

upper_var="MiXeD CaSe"
echo "upper_var after assignment: $upper_var"

# Test readonly attribute (-r)
echo "Testing readonly attribute (-r):"
declare -r readonly_var="constant value"
echo "readonly_var: $readonly_var"

# Try to modify readonly variable (should fail)
readonly_var="new value" 2>/dev/null || echo "Cannot modify readonly variable (expected)"

# Test export attribute (-x)
echo "Testing export attribute (-x):"
declare -x export_var="exported value"
echo "export_var: $export_var"

# Verify it's exported (check with subshell)
(echo "export_var in subshell: $export_var")

# Test array attribute (-a)
echo "Testing array attribute (-a):"
declare -a array_var=("element1" "element2" "element3")
echo "array_var: ${array_var[@]}"
echo "array_var[1]: ${array_var[1]}"

# Test associative array attribute (-A)
echo "Testing associative array attribute (-A):"
declare -A assoc_var=([key1]="value1" [key2]="value2")
echo "assoc_var keys: ${!assoc_var[@]}"
echo "assoc_var[key1]: ${assoc_var[key1]}"

# Test combining attributes
echo "Testing combined attributes:"

# Integer + export
declare -ix int_export=42
echo "int_export: $int_export"
(echo "int_export in subshell: $int_export")

# Lowercase + export
declare -lx lower_export="EXPORTED LOWERCASE"
echo "lower_export: $lower_export"
(echo "lower_export in subshell: $lower_export")

# Uppercase + readonly
declare -ur upper_readonly="readonly uppercase"
echo "upper_readonly: $upper_readonly"
upper_readonly="change attempt" 2>/dev/null || echo "Cannot modify readonly uppercase variable"

# Test attribute inspection
echo "Testing attribute inspection:"
echo "Checking variable attributes with declare -p:"

declare -p int_var 2>/dev/null || echo "int_var attributes not available"
declare -p lower_var 2>/dev/null || echo "lower_var attributes not available"
declare -p readonly_var 2>/dev/null || echo "readonly_var attributes not available"
declare -p array_var 2>/dev/null || echo "array_var attributes not available"

# Test attribute modification
echo "Testing attribute modification:"
normal_var="normal value"
echo "normal_var before declare: $normal_var"

# Add integer attribute to existing variable
declare -i normal_var
normal_var=10+5
echo "normal_var after adding integer attribute: $normal_var"

# Test attribute removal (if supported)
echo "Testing attribute behavior:"
declare -i math_var=100
echo "math_var with integer attribute: $math_var"

math_var="50+25"
echo "math_var arithmetic: $math_var"

# Test with different value types
echo "Testing attributes with different value types:"

# Integer with hex
declare -i hex_var=0x10
echo "hex_var (0x10): $hex_var"

# Integer with octal
declare -i octal_var=010
echo "octal_var (010): $octal_var"

# Integer with arithmetic expressions
declare -i expr_var="2**3"
echo "expr_var (2**3): $expr_var"

# Test case transformations with complex strings
echo "Testing case transformations:"
declare -l complex_lower="Hello123WORLD!@#"
echo "complex_lower: $complex_lower"

declare -u complex_upper="hello123world!@#"
echo "complex_upper: $complex_upper"

# Test array attributes with different assignments
echo "Testing array attribute variations:"
declare -a indexed_array
indexed_array[0]="first"
indexed_array[2]="third"
echo "indexed_array: ${indexed_array[@]}"
echo "indexed_array indices: ${!indexed_array[@]}"

# Test nameref attribute (if supported)
echo "Testing nameref concept:"
original_var="original value"
reference_var="original_var"
echo "Original: $original_var"
echo "Reference name: $reference_var"
eval "echo \"Reference value: \$$reference_var\""

# Test local attributes in functions
echo "Testing attributes in functions:"
test_attributes_func() {
    local -i local_int=20
    local -l local_lower="LOCAL UPPERCASE"
    local -u local_upper="local lowercase"
    
    echo "Function local_int: $local_int"
    echo "Function local_lower: $local_lower"
    echo "Function local_upper: $local_upper"
    
    # Modify with attributes
    local_int="30+10"
    echo "Function local_int after arithmetic: $local_int"
}

test_attributes_func

# Test attribute inheritance
echo "Testing attribute inheritance:"
declare -i parent_int=100
child_function() {
    echo "parent_int in function: $parent_int"
    parent_int="200+50"
    echo "parent_int modified in function: $parent_int"
}

echo "parent_int before function: $parent_int"
child_function
echo "parent_int after function: $parent_int"

# Test error handling with attributes
echo "Testing error handling:"
declare -r error_readonly="readonly"
declare -i error_int=5

echo "Attempting invalid operations:"
error_readonly="change" 2>/dev/null || echo "Readonly assignment failed (expected)"
error_int="invalid_number" 2>/dev/null && echo "error_int: $error_int"

# Test attribute persistence
echo "Testing attribute persistence:"
declare -i persistent_int=10
echo "persistent_int: $persistent_int"

# Reassign without declare
persistent_int=20+5
echo "persistent_int after reassignment: $persistent_int"

# Test unset with attributes
echo "Testing unset with attributes:"
declare -i unset_test=42
echo "unset_test before unset: $unset_test"
unset unset_test
echo "unset_test after unset: $unset_test"

# Re-declare after unset
declare -i unset_test=10
echo "unset_test after re-declare: $unset_test"

# Test global vs local attribute behavior
echo "Testing global vs local attributes:"
global_attr_var="global"
declare -u global_attr_var

attr_test_func() {
    echo "global_attr_var in function: $global_attr_var"
    local -l global_attr_var="FUNCTION LOCAL"
    echo "local global_attr_var: $global_attr_var"
}

echo "global_attr_var before function: $global_attr_var"
attr_test_func
echo "global_attr_var after function: $global_attr_var"

# Test multiple attribute combinations
echo "Testing multiple attribute combinations:"
declare -irx multi_attr=100
echo "multi_attr (integer, readonly, export): $multi_attr"
(echo "multi_attr in subshell: $multi_attr")

# Test attribute conflicts
echo "Testing attribute conflicts:"
declare -lu conflict_var="Test String"  # lowercase + uppercase
echo "conflict_var with both -l and -u: $conflict_var"

# Test array attributes with assignments
echo "Testing array attributes with different assignments:"
declare -a assign_array=("one" "two" "three")
assign_array[5]="six"
assign_array+=("seven")
echo "assign_array: ${assign_array[@]}"

# Test typeset vs declare
echo "Testing typeset vs declare:"
typeset -i typeset_var=25 2>/dev/null || echo "typeset not available"
echo "typeset_var: $typeset_var"

echo "Variable attributes test completed"