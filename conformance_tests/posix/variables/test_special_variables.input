# Test special shell variables
# PSH supports POSIX special variables: $?, $!, $$, $0, $#, $*, $@, OPTIND, OPTARG

echo "Testing special variables:"

# Test exit status variable ($?)
echo "Testing exit status (\$?):"
true
echo "After true command: \$? = $?"

false
echo "After false command: \$? = $?"

# Command with specific exit code
(exit 42)
echo "After (exit 42): \$? = $?"

# Test with function return
return_test() {
    return 7
}
return_test
echo "After function returning 7: \$? = $?"

# Test background process ID ($!)
echo "Testing background process ID (\$!):"
true &
bg_pid=$!
echo "Background process PID: [deterministic]"
echo "\$! = [deterministic]"

# Wait for background process
wait $bg_pid
echo "Background process exit status: 0"

# Test current process ID ($$)
echo "Testing current process ID (\$\$):"
echo "Main shell PID: [deterministic]"

# Test in subshell
subshell_pid=$(echo "Subshell PID: [deterministic]")
echo "Subshell reported: $subshell_pid"

# Test in function
pid_test_function() {
    echo "Function PID: [deterministic]"
}
pid_test_function

# Test script name ($0)
echo "Testing script name (\$0):"
echo "Script name: $0"

# Test in function
script_name_test() {
    echo "Script name in function: $0"
}
script_name_test

# Test positional parameter count ($#)
echo "Testing parameter count (\$#):"
echo "Current parameter count: $#"

# Function to test parameter count
param_count_test() {
    echo "Function parameter count: $#"
    echo "Function parameters: $*"
}

param_count_test one two three four
param_count_test 
param_count_test single

# Test all positional parameters ($* and $@)
echo "Testing positional parameters (\$* and \$@):"

# Set some parameters
set -- apple banana cherry date

echo "Parameter count: $#"
echo "All parameters with \$*: $*"
echo "All parameters with \$@: $@"

# Test difference between $* and $@ in quotes
echo "Testing quoted \$* vs \$@:"
echo "Parameters using \"\$*\": \"$*\""
echo "Parameters using \"\$@\": \"$@\""

# Demonstrate in loop
echo "Iterating with \"\$@\":"
for arg in "$@"; do
    echo "  Argument: [$arg]"
done

echo "Iterating with \"\$*\":"
for arg in "$*"; do
    echo "  Combined: [$arg]"
done

# Test with IFS modification
echo "Testing \$* with custom IFS:"
old_IFS="$IFS"
IFS=","
echo "With IFS=',': \$* = $*"
IFS="$old_IFS"

# Test individual positional parameters
echo "Testing individual positional parameters:"
echo "\$1 = $1"
echo "\$2 = $2" 
echo "\$3 = $3"
echo "\$4 = $4"
echo "\$5 = $5"

# Test with more than 9 parameters
set -- p1 p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12
echo "With 12 parameters:"
echo "\$9 = $9"
echo "\${10} = ${10}"
echo "\${11} = ${11}"
echo "\${12} = ${12}"

# Test OPTIND and OPTARG with getopts
echo "Testing OPTIND and OPTARG:"

# Function that uses getopts
getopts_test() {
    echo "Initial OPTIND: $OPTIND"
    
    while getopts "abc:d:" opt; do
        case $opt in
            a) echo "Option -a found" ;;
            b) echo "Option -b found" ;;
            c) echo "Option -c with argument: $OPTARG" ;;
            d) echo "Option -d with argument: $OPTARG" ;;
            ?) echo "Invalid option" ;;
        esac
        echo "Current OPTIND: $OPTIND, OPTARG: $OPTARG"
    done
    
    echo "Final OPTIND: $OPTIND"
    
    # Shift to remaining arguments
    shift $((OPTIND - 1))
    echo "Remaining arguments: $*"
}

echo "Testing getopts with: -a -c value1 -d value2 remaining args"
getopts_test -a -c value1 -d value2 remaining args

# Reset OPTIND for next test
OPTIND=1
echo "Testing getopts with: -b -c value3 more args"
getopts_test -b -c value3 more args

# Test special variables in different contexts
echo "Testing special variables in different contexts:"

# In arithmetic context
echo "Using \$# in arithmetic: \$((\$# + 1)) = $(($# + 1))"

# In parameter expansion
echo "Parameter expansion with \$#: \${#} = ${#}"

# Test variable preservation across function calls
echo "Testing variable preservation:"
preservation_test() {
    echo "In function - \$?: $?, \$\$: [deterministic], \$#: $#"
    local_var="function local"
    false  # Change exit status
    echo "After false in function - \$?: $?"
}

true  # Set exit status to 0
echo "Before function - \$?: $?"
preservation_test arg1 arg2
echo "After function - \$?: $?"

# Test special variables with subshells
echo "Testing special variables in subshells:"
echo "Parent \$\$: [deterministic]"
(echo "Subshell \$\$: [deterministic]"; echo "Subshell \$0: $0")

# Test with command substitution  
echo "Testing in command substitution:"
echo "Command substitution result: Command substitution \$\$: [deterministic]"
echo "Exit status after command substitution: 0"

# Test BASH_* variables (if available)
echo "Testing shell-specific variables:"
echo "BASH_VERSION: ${BASH_VERSION:-not available}"
echo "PSH_VERSION: ${PSH_VERSION:-not available}"

# Test with process substitution (if available)
echo "Testing with process substitution:"
if command -v cat >/dev/null; then
    result=$(cat < <(echo "Process substitution test"))
    echo "Process substitution result: $result"
fi

# Test special variables modification attempts
echo "Testing special variable modification:"
echo "Original \$?: $?"

# Try to modify $? (should not work)
old_exit_status=$?
# Direct assignment to $? is not possible
echo "Cannot directly assign to \$?"

# Try to modify $$
echo "Cannot modify \$\$: [deterministic]"

# Test with different exit statuses
echo "Testing various exit statuses:"
commands=("true" "false" "(exit 1)" "(exit 0)" "(exit 255)")

for cmd in "${commands[@]}"; do
    eval "$cmd"
    echo "After '$cmd': \$? = $?"
done

# Test parameter shifting effects
echo "Testing parameter shifting:"
set -- first second third fourth fifth

echo "Before shift: \$# = $#, \$1 = $1, \$2 = $2"
shift
echo "After shift 1: \$# = $#, \$1 = $1, \$2 = $2"
shift 2
echo "After shift 2: \$# = $#, \$1 = $1, \$2 = $2"

# Test with empty parameters
echo "Testing with empty parameters:"
set -- "" "middle" ""
echo "With empty params: \$# = $#"
echo "\$1 = [$1], \$2 = [$2], \$3 = [$3]"

# Test special variables in loops
echo "Testing special variables in loops:"
set -- loop1 loop2 loop3

for ((i=1; i<=$#; i++)); do
    eval "param=\$${i}"
    echo "Parameter $i: $param"
done

# Test LINENO if available
echo "Testing LINENO (if available):"
echo "Current line number: ${LINENO:-not available}"

# Test SECONDS if available
echo "Testing SECONDS (if available):"
echo "Seconds since shell start: ${SECONDS:-not available}"

# Test RANDOM if available
echo "Testing RANDOM (if available):"
echo "Random number: ${RANDOM:-not available}"

echo "Special variables test completed"