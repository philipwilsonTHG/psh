# Test readonly variable functionality
# PSH supports readonly variables with proper enforcement and error handling

echo "Testing readonly variables:"

# Test basic readonly declaration
echo "Testing basic readonly declaration:"
readonly basic_readonly="immutable value"
echo "basic_readonly: $basic_readonly"

# Try to modify (should fail)
basic_readonly="new value" 2>/dev/null || echo "Cannot modify readonly variable (expected)"

# Test readonly with declare
echo "Testing readonly with declare -r:"
declare -r declare_readonly="declared readonly"
echo "declare_readonly: $declare_readonly"

# Try to modify (should fail)
declare_readonly="modification attempt" 2>/dev/null || echo "Cannot modify declare readonly variable (expected)"

# Test readonly arrays
echo "Testing readonly arrays:"
declare -ar readonly_array=("element1" "element2" "element3")
echo "readonly_array: ${readonly_array[@]}"

# Try to modify array (should fail)
readonly_array[0]="modified" 2>/dev/null || echo "Cannot modify readonly array element (expected)"
readonly_array+=("new element") 2>/dev/null || echo "Cannot append to readonly array (expected)"

# Test readonly associative arrays
echo "Testing readonly associative arrays:"
declare -Ar readonly_assoc=([key1]="value1" [key2]="value2")
echo "readonly_assoc keys: ${!readonly_assoc[@]}"
echo "readonly_assoc[key1]: ${readonly_assoc[key1]}"

# Try to modify associative array (should fail)
readonly_assoc[key1]="modified" 2>/dev/null || echo "Cannot modify readonly associative array (expected)"
readonly_assoc[key3]="new" 2>/dev/null || echo "Cannot add to readonly associative array (expected)"

# Test readonly inheritance in functions
echo "Testing readonly in functions:"
readonly global_readonly="global readonly value"

readonly_function_test() {
    echo "global_readonly in function: $global_readonly"
    
    # Try to modify global readonly (should fail)
    global_readonly="function modification" 2>/dev/null || echo "Cannot modify global readonly in function (expected)"
    
    # Local readonly
    local -r local_readonly="local readonly"
    echo "local_readonly: $local_readonly"
    
    # Try to modify local readonly (should fail)
    local_readonly="local modification" 2>/dev/null || echo "Cannot modify local readonly (expected)"
}

readonly_function_test

# Test readonly with different data types
echo "Testing readonly with different types:"

# Integer readonly
declare -ir readonly_int=42
echo "readonly_int: $readonly_int"
readonly_int=100 2>/dev/null || echo "Cannot modify readonly integer (expected)"

# String readonly
declare -r readonly_string="immutable string"
echo "readonly_string: $readonly_string"

# Exported readonly
declare -rx readonly_export="readonly exported"
echo "readonly_export: $readonly_export"
(echo "readonly_export in subshell: $readonly_export")

# Try to modify exported readonly (should fail)
readonly_export="modification" 2>/dev/null || echo "Cannot modify readonly exported variable (expected)"

# Test readonly detection
echo "Testing readonly detection:"
echo "Checking readonly status:"

# Function to check if variable is readonly
is_readonly() {
    local var_name="$1"
    if declare -p "$var_name" 2>/dev/null | grep -q "declare -.*r"; then
        echo "$var_name is readonly"
    else
        echo "$var_name is not readonly"
    fi
}

normal_var="normal"
is_readonly "normal_var"
is_readonly "basic_readonly"
is_readonly "readonly_int"

# Test readonly with unset
echo "Testing readonly with unset:"
declare -r unset_readonly="cannot unset"
echo "unset_readonly: $unset_readonly"

# Try to unset readonly variable (should fail)
unset unset_readonly 2>/dev/null || echo "Cannot unset readonly variable (expected)"
echo "unset_readonly after unset attempt: $unset_readonly"

# Test readonly error messages
echo "Testing readonly error handling:"
declare -r error_test="readonly value"

# Multiple modification attempts
error_test="attempt1" 2>/dev/null || echo "First modification failed"
error_test="attempt2" 2>/dev/null || echo "Second modification failed"

# Test readonly with command substitution
echo "Testing readonly with command substitution:"
declare -r cmd_readonly="$(echo 'command output')"
echo "cmd_readonly: $cmd_readonly"

# Try to modify (should fail)
cmd_readonly="$(echo 'new command')" 2>/dev/null || echo "Cannot modify readonly with command substitution (expected)"

# Test readonly with arithmetic
echo "Testing readonly with arithmetic:"
declare -ir arith_readonly=$((10 + 5))
echo "arith_readonly: $arith_readonly"

# Try arithmetic modification (should fail)
arith_readonly=$((arith_readonly + 1)) 2>/dev/null || echo "Cannot modify readonly with arithmetic (expected)"

# Test readonly with parameter expansion
echo "Testing readonly with parameter expansion:"
base_value="hello"
declare -r param_readonly="${base_value}_world"
echo "param_readonly: $param_readonly"

# Try to modify (should fail)
param_readonly="${base_value}_modified" 2>/dev/null || echo "Cannot modify readonly with parameter expansion (expected)"

# Test readonly in subshells
echo "Testing readonly in subshells:"
declare -r subshell_readonly="parent value"

(
    echo "subshell_readonly in subshell: $subshell_readonly"
    # Try to modify in subshell (should fail)
    subshell_readonly="subshell modification" 2>/dev/null || echo "Cannot modify readonly in subshell (expected)"
)

echo "subshell_readonly in parent: $subshell_readonly"

# Test readonly with special variables
echo "Testing readonly with special variables:"

# Make $? readonly (if supported)
readonly_exit_code="$?"
declare -r readonly_exit_code 2>/dev/null || echo "Cannot make exit code readonly"

# Test readonly with environment variables
echo "Testing readonly with environment:"
export READONLY_ENV="environment value"
declare -r READONLY_ENV 2>/dev/null || echo "Cannot make exported variable readonly"

echo "READONLY_ENV: $READONLY_ENV"
READONLY_ENV="modification attempt" 2>/dev/null || echo "Cannot modify readonly environment variable (expected)"

# Test readonly variable listing
echo "Testing readonly variable listing:"
echo "Listing readonly variables:"
declare -r | head -5 2>/dev/null || echo "Cannot list readonly variables"

# Test readonly with different assignment methods
echo "Testing readonly assignment methods:"

# Direct assignment then readonly
assignment_test="initial value"
readonly assignment_test 2>/dev/null || echo "Cannot make existing variable readonly"
echo "assignment_test: $assignment_test"

# Readonly during assignment
declare -r during_assignment="readonly from start"
echo "during_assignment: $during_assignment"

# Test readonly with complex values
echo "Testing readonly with complex values:"
declare -r complex_readonly="value with spaces and symbols !@#$%"
echo "complex_readonly: $complex_readonly"

declare -r json_like='{"key":"value","number":42}'
echo "json_like: $json_like"

# Test readonly with empty values
echo "Testing readonly with empty values:"
declare -r empty_readonly=""
echo "empty_readonly: [$empty_readonly]"

# Try to modify empty readonly (should fail)
empty_readonly="no longer empty" 2>/dev/null || echo "Cannot modify empty readonly (expected)"

# Test readonly with null values
declare -r null_readonly
echo "null_readonly: [$null_readonly]"

# Test readonly restoration after function
echo "Testing readonly scope:"
scope_test_var="original"

readonly_scope_test() {
    local -r scope_test_var="function local readonly"
    echo "scope_test_var in function: $scope_test_var"
}

echo "scope_test_var before function: $scope_test_var"
readonly_scope_test
echo "scope_test_var after function: $scope_test_var"

# Now make global readonly
declare -r scope_test_var
scope_test_var="modification attempt" 2>/dev/null || echo "Cannot modify global readonly (expected)"

# Test readonly with arrays and complex structures
echo "Testing readonly with complex structures:"
declare -ar complex_array=("item 1" "item with spaces" "item/with/slashes")
echo "complex_array: ${complex_array[@]}"

# Test readonly variable persistence
echo "Testing readonly persistence:"
declare -r persistent_readonly="persistent value"

# Create function that tries to modify
modify_persistent() {
    persistent_readonly="function modification" 2>/dev/null || echo "Persistent readonly protected in function"
}

modify_persistent
echo "persistent_readonly after function: $persistent_readonly"

echo "Readonly variables test completed"