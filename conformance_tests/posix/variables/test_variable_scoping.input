# Test variable scoping behavior
# PSH supports proper global, local, and environment variable interaction

echo "Testing variable scoping:"

# Test global variables
echo "Testing global variables:"
global_var="global value"
echo "global_var: $global_var"

# Test global variable access in function
global_access_test() {
    echo "global_var in function: $global_var"
    global_var="modified by function"
    echo "global_var modified in function: $global_var"
}

echo "Before function call: $global_var"
global_access_test
echo "After function call: $global_var"

# Test local variables
echo "Testing local variables:"
global_scope="global"

local_test_function() {
    echo "global_scope in function (before local): $global_scope"
    
    local local_var="local value"
    echo "local_var: $local_var"
    
    # Shadow global variable
    local global_scope="local shadow"
    echo "global_scope (shadowed): $global_scope"
    
    # Modify local
    local_var="modified local"
    echo "local_var modified: $local_var"
}

echo "global_scope before function: $global_scope"
local_test_function
echo "global_scope after function: $global_scope"

# Test local variable isolation
echo "Testing local variable isolation:"
isolation_test() {
    local isolated_var="function only"
    echo "isolated_var in function: $isolated_var"
}

isolation_test
echo "isolated_var outside function: $isolated_var"

# Test nested function scoping
echo "Testing nested function scoping:"
outer_var="outer value"

outer_function() {
    local outer_local="outer local"
    echo "outer_function - outer_var: $outer_var"
    echo "outer_function - outer_local: $outer_local"
    
    inner_function() {
        local inner_local="inner local"
        echo "inner_function - outer_var: $outer_var"
        echo "inner_function - outer_local: $outer_local"
        echo "inner_function - inner_local: $inner_local"
        
        # Modify variables at different scopes
        outer_var="modified by inner"
        outer_local="modified by inner"
    }
    
    inner_function
    echo "after inner_function - outer_var: $outer_var"
    echo "after inner_function - outer_local: $outer_local"
}

echo "Before outer_function: $outer_var"
outer_function
echo "After outer_function: $outer_var"

# Test environment variable inheritance
echo "Testing environment variable inheritance:"
export ENV_VAR="exported value"
echo "ENV_VAR: $ENV_VAR"

env_test_function() {
    echo "ENV_VAR in function: $ENV_VAR"
    
    # Modify environment variable
    ENV_VAR="modified in function"
    echo "ENV_VAR modified in function: $ENV_VAR"
    
    # Create local environment variable
    local ENV_VAR="local env var"
    echo "ENV_VAR (local): $ENV_VAR"
}

echo "Before env function: $ENV_VAR"
env_test_function
echo "After env function: $ENV_VAR"

# Test subshell variable scoping
echo "Testing subshell scoping:"
subshell_var="parent value"

echo "Before subshell: $subshell_var"
(
    echo "In subshell: $subshell_var"
    subshell_var="modified in subshell"
    echo "Modified in subshell: $subshell_var"
    
    new_subshell_var="created in subshell"
    echo "new_subshell_var in subshell: $new_subshell_var"
)
echo "After subshell: $subshell_var"
echo "new_subshell_var after subshell: $new_subshell_var"

# Test variable export and unexport
echo "Testing export/unexport:"
unexported="unexported value"
exported="exported value"
export exported

export_test() {
    echo "unexported in function: $unexported"
    echo "exported in function: $exported"
}

echo "Testing function access:"
export_test

echo "Testing subshell access:"
(echo "unexported in subshell: $unexported"; echo "exported in subshell: $exported")

# Test local with export
echo "Testing local with export:"
local_export_test() {
    local -x local_exported="local and exported"
    echo "local_exported in function: $local_exported"
    
    # Test subshell from within function
    (echo "local_exported in subshell: $local_exported")
}

local_export_test
echo "local_exported after function: $local_exported"

# Test variable unset in different scopes
echo "Testing unset in different scopes:"
unset_test_var="global unset test"

unset_scope_test() {
    echo "unset_test_var in function: $unset_test_var"
    
    local unset_test_var="local version"
    echo "local unset_test_var: $unset_test_var"
    
    unset unset_test_var
    echo "after local unset: $unset_test_var"
}

echo "Before function: $unset_test_var"
unset_scope_test
echo "After function: $unset_test_var"

# Test readonly variable scoping
echo "Testing readonly scoping:"
declare -r readonly_global="global readonly"

readonly_scope_test() {
    echo "readonly_global in function: $readonly_global"
    
    # Try to create local readonly with same name
    local -r readonly_global="local readonly" 2>/dev/null || echo "Cannot shadow readonly with local"
    
    # Create different local readonly
    local -r local_readonly="function readonly"
    echo "local_readonly: $local_readonly"
}

readonly_scope_test
echo "readonly_global after function: $readonly_global"

# Test array variable scoping
echo "Testing array scoping:"
global_array=(global1 global2 global3)

array_scope_test() {
    echo "global_array in function: ${global_array[@]}"
    
    local -a local_array=(local1 local2 local3)
    echo "local_array: ${local_array[@]}"
    
    # Modify global array
    global_array[0]="modified_global1"
    echo "modified global_array: ${global_array[@]}"
}

echo "Before function: ${global_array[@]}"
array_scope_test
echo "After function: ${global_array[@]}"

# Test associative array scoping
echo "Testing associative array scoping:"
declare -A global_assoc=([key1]="global1" [key2]="global2")

assoc_scope_test() {
    # Sort outputs for consistent order
    sorted_global_in_func=($(printf '%s\n' "${global_assoc[@]}" | sort))
    echo "global_assoc in function: ${sorted_global_in_func[@]}"
    
    local -A local_assoc=([lkey1]="local1" [lkey2]="local2")
    sorted_local=($(printf '%s\n' "${local_assoc[@]}" | sort))
    echo "local_assoc: ${sorted_local[@]}"
    
    # Modify global associative array
    global_assoc[key1]="modified_global1"
    sorted_modified=($(printf '%s\n' "${global_assoc[@]}" | sort))
    echo "modified global_assoc: ${sorted_modified[@]}"
}

sorted_before=($(printf '%s\n' "${global_assoc[@]}" | sort))
echo "Before function: ${sorted_before[@]}"
assoc_scope_test
sorted_after=($(printf '%s\n' "${global_assoc[@]}" | sort))
echo "After function: ${sorted_after[@]}"

# Test variable scoping with recursion
echo "Testing scoping with recursion:"
recursive_var="initial"

recursive_scope_test() {
    local depth=$1
    local recursive_var="depth_$depth"
    
    echo "recursive_var at depth $depth: $recursive_var"
    
    if [ $depth -gt 1 ]; then
        recursive_scope_test $((depth - 1))
    fi
    
    echo "recursive_var returning from depth $depth: $recursive_var"
}

echo "Before recursion: $recursive_var"
recursive_scope_test 3
echo "After recursion: $recursive_var"

# Test parameter scoping ($1, $2, etc.)
echo "Testing parameter scoping:"
set -- global_arg1 global_arg2 global_arg3

param_scope_test() {
    echo "Function parameters: $1 $2 $3"
    echo "Parameter count in function: $#"
    
    local saved_params=("$@")
    set -- func_arg1 func_arg2
    echo "Modified parameters: $1 $2"
    echo "Parameter count after set: $#"
    
    # Restore parameters
    set -- "${saved_params[@]}"
    echo "Restored parameters: $1 $2 $3"
}

echo "Global parameters before function: $1 $2 $3"
param_scope_test
echo "Global parameters after function: $1 $2 $3"

# Test special variable scoping
echo "Testing special variable scoping:"
echo "Current process ID: [deterministic]"
echo "Exit status: $?"

special_scope_test() {
    echo "Process ID in function: [deterministic]"
    false  # Set exit status
    echo "Exit status in function: $?"
    
    # Test FUNCNAME if available
    echo "Function name: ${FUNCNAME:-not_available}"
}

special_scope_test
echo "Exit status after function: $?"

# Test variable scoping with eval
echo "Testing scoping with eval:"
eval_var="eval test"

eval_scope_test() {
    local eval_var="local eval"
    echo "Direct eval_var: $eval_var"
    eval 'echo "Eval eval_var: $eval_var"'
    
    eval "local eval_created=\"created by eval\""
    echo "eval_created: $eval_created"
}

echo "Before eval function: $eval_var"
eval_scope_test
echo "After eval function: $eval_var"

# Test scoping with command substitution
echo "Testing scoping with command substitution:"
cmd_sub_var="parent value"

cmd_sub_result=$(
    echo "cmd_sub_var in command substitution: $cmd_sub_var"
    cmd_sub_var="modified in command substitution"
    echo "modified cmd_sub_var: $cmd_sub_var"
    echo "final_result"
)

echo "Command substitution result: $cmd_sub_result"
echo "cmd_sub_var after command substitution: $cmd_sub_var"

echo "Variable scoping test completed"