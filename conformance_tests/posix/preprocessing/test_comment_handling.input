# Test comment processing and quote awareness
# PSH properly handles comments with respect to quotes and contexts

echo "Testing comment handling:"

# Test basic comments
echo "Testing basic comments:"
echo "This line has output" # This is a comment

# Test comments at beginning of line
# This entire line is a comment
echo "After comment line"

# Test comments with special characters
echo "Testing special characters in comments:" # Comment with !@#$%^&*()

# Test comments in different contexts
echo "Testing comments in various contexts:"

# Comment before if statement
if [ "test" = "test" ]; then # Comment on same line as if
    echo "Inside if block" # Comment in block
fi # Comment after fi

# Test comments in loops
for i in 1 2 3; do # Comment in for loop
    echo "Loop iteration: $i" # Comment in loop body
done # Comment after done

# Test comments with quotes
echo "Testing comments with quotes:"
echo "This string contains # but it's not a comment"
echo 'Single quoted # also not a comment'

# Test comments after quotes
echo "String ends here" # This is a comment
echo 'Single quoted string' # This is also a comment

# Test comments with mixed quotes
echo "Double quoted" 'single quoted' # Comment after mixed quotes

# Test comments in command substitution
echo "Testing comments in command substitution:"
result=$(echo "Command output" # Comment in command substitution
)
echo "Result: $result"

# Test comments in arithmetic expansion
echo "Testing comments in arithmetic:"
math_result=$((10 + 5)) # Comment after arithmetic
echo "Math result: $math_result"

# Test comments in parameter expansion
echo "Testing comments in parameter expansion:"
var="test value"
expanded="${var}" # Comment after parameter expansion
echo "Expanded: $expanded"

# Test comments in array contexts
echo "Testing comments in arrays:"
array=(
    "first"   # Comment for first element
    "second"  # Comment for second element  
    "third"   # Comment for third element
)
echo "Array: ${array[@]}"

# Test comments in here documents
echo "Testing comments in here documents:"
cat << 'EOF' # Comment before here document
This is content in here document
# This looks like a comment but it's content
More content here
EOF
# Comment after here document

# Test comments with line continuation
echo "Testing comments with line continuation:"
echo "Line continues \
# This comment appears after continuation
onto next line"

# Test comments in function definitions
echo "Testing comments in functions:"
test_comment_func() { # Comment in function definition
    # Comment inside function
    echo "Function output" # Comment on output line
    return 0 # Comment on return
} # Comment after function

test_comment_func

# Test comments with redirections
echo "Testing comments with redirections:"
echo "Output to file" > tmp/comment_test.txt # Comment after redirect
echo "Append to file" >> tmp/comment_test.txt # Comment after append

cat tmp/comment_test.txt # Comment after cat
rm -f tmp/comment_test.txt # Comment after rm

# Test comments with pipes
echo "Testing comments with pipes:"
echo "Pipeline input" | # Comment in pipeline
cat | # Another comment
cat # Final comment

# Test comments with background processes
echo "Testing comments with background processes:"
sleep 0.1 & # Comment after background process
wait # Comment after wait

# Test comments with multiple commands
echo "Testing comments with multiple commands:"
echo "First command" ; echo "Second command" # Comment after multiple commands
echo "Third command" && echo "Fourth command" # Comment after &&
echo "Fifth command" || echo "Sixth command" # Comment after ||

# Test escaped hash characters
echo "Testing escaped hash characters:"
echo "This \# is not a comment"
echo "Neither is this \\# character"

# Test hash in different quote contexts
echo "Testing hash in quotes:"
echo "Hash in double quotes: #"
echo 'Hash in single quotes: #'
echo `Hash in backticks: #`

# Test comments with variables containing hash
echo "Testing variables with hash:"
hash_var="value#with#hash"
echo "Variable with hash: $hash_var" # This is a comment

# Test comments in case statements
echo "Testing comments in case statements:"
test_value="option1"
case "$test_value" in # Comment after case
    "option1") # Comment in case branch
        echo "Option 1 selected" # Comment in case body
        ;; # Comment after ;;
    *) # Comment in default case
        echo "Default option" # Comment in default body
        ;; # Comment after default ;;
esac # Comment after esac

# Test comments in while loops
echo "Testing comments in while loops:"
counter=0
while [ $counter -lt 3 ]; do # Comment in while condition
    echo "While iteration: $counter" # Comment in while body
    counter=$((counter + 1)) # Comment after arithmetic
done # Comment after while

# Test comments with subshells
echo "Testing comments in subshells:"
(
    echo "Subshell command" # Comment in subshell
    # Comment line in subshell
) # Comment after subshell

# Test comments with eval
echo "Testing comments with eval:"
eval "echo 'Eval output'" # Comment after eval

# Test multi-line comments concept
echo "Testing multi-line comment concept:"
: '
This is a multi-line comment using
the : command with a single-quoted string.
Everything here is ignored.
'
echo "After multi-line comment"

# Test comments with different whitespace
echo "Testing comments with whitespace:"
echo "Command"#Comment without space
echo "Command" # Comment with space
echo "Command"	# Comment with tab

# Test comments at end of file scenarios
echo "Testing end-of-file comments:"
echo "Before final comments"

# Comment before complex structure
if [ -n "test" ]; then # Inline comment
    # Comment in block
    echo "Complex structure" # Another inline comment
fi # Final comment

# Test heredoc with comments
echo "Testing heredoc edge cases:"
cat << EOF # Comment after heredoc marker
Content line 1
Content line 2
EOF
# Comment after heredoc

# Test comments in parameter assignments
echo "Testing comments in assignments:"
var1="value1" # Comment after assignment
export var2="value2" # Comment after export
readonly var3="value3" # Comment after readonly

echo "var1: $var1, var2: $var2, var3: $var3"

# Test comments with special operators
echo "Testing comments with operators:"
test "a" = "a" && echo "Equal" # Comment after test
[ -n "string" ] || echo "Empty" # Comment after bracket test

# Test comment-like patterns that aren't comments
echo "Testing comment-like patterns:"
url="http://example.com#fragment"
echo "URL with fragment: $url"

file_path="/path/to/file.txt#backup"
echo "File path: $file_path"

# Test comments with process substitution
echo "Testing comments with process substitution:"
if command -v cat >/dev/null; then
    diff <(echo "text1") <(echo "text1") # Comment after process substitution
fi

echo "Comment handling test completed" # Final comment