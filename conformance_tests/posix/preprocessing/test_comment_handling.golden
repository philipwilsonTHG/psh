Testing comment handling:
Testing basic comments:
This line has output
After comment line
Testing comments in various contexts:
Inside if block
Loop iteration: 1
Loop iteration: 2
Loop iteration: 3
Testing comments with quotes:
This string contains # but it's not a comment
Single quoted # also not a comment
String ends here
Single quoted string
Double quoted single quoted
Testing comments in command substitution:
psh: !@#$%^: event not found
psh: !@#$%^: event not found
Traceback (most recent call last):
  File "<frozen runpy>", line 198, in _run_module_as_main
  File "<frozen runpy>", line 88, in _run_code
  File "/Users/pwilson/src/psh/psh/__main__.py", line 169, in <module>
    main()
    ~~~~^^
  File "/Users/pwilson/src/psh/psh/__main__.py", line 163, in main
    exit_code = shell.run_command(script_content, add_to_history=False)
  File "/Users/pwilson/src/psh/psh/shell.py", line 391, in run_command
    return self.script_manager.execute_from_source(input_source, add_to_history)
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pwilson/src/psh/psh/scripting/base.py", line 48, in execute_from_source
    return self.source_processor.execute_from_source(input_source, add_to_history)
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pwilson/src/psh/psh/scripting/source_processor.py", line 92, in execute_from_source
    tokens = tokenize(test_command)
  File "/Users/pwilson/src/psh/psh/lexer/__init__.py", line 62, in tokenize
    tokens = lexer.tokenize()
  File "/Users/pwilson/src/psh/psh/lexer/core.py", line 390, in tokenize
    handler()
    ~~~~~~~^^
  File "/Users/pwilson/src/psh/psh/lexer/state_handlers.py", line 71, in handle_word_state
    parts = self._read_word_parts(quote_context=None)
  File "/Users/pwilson/src/psh/psh/lexer/state_handlers.py", line 297, in _read_word_parts
    part = self.parse_variable_or_expansion(quote_context)
  File "/Users/pwilson/src/psh/psh/lexer/core.py", line 117, in parse_variable_or_expansion
    return self._parse_command_or_arithmetic_expansion(start_pos, quote_context)
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pwilson/src/psh/psh/lexer/core.py", line 156, in _parse_command_or_arithmetic_expansion
    content = self.read_balanced_parens()
  File "/Users/pwilson/src/psh/psh/lexer/helpers.py", line 98, in read_balanced_parens
    self._error("Unclosed parenthesis")
    ~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pwilson/src/psh/psh/lexer/core.py", line 330, in _error
    return self.error_handler.handle_error(self, message)
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^
  File "/Users/pwilson/src/psh/psh/lexer/position.py", line 333, in handle_error
    raise error
psh.lexer.position.LexerError:
Lexer Error: Unclosed parenthesis
  at line 1, column 65

>    1 | result=$(echo "Command output" # Comment in command substitution
       |                                                                 ^
