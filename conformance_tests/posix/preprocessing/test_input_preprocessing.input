# Test multi-line script processing and command buffering
# PSH properly handles complex input preprocessing scenarios

echo "Testing input preprocessing:"

# Test basic multi-line input processing
echo "Testing basic multi-line processing:"
if [ "test" = "test" ]; then
    echo "Multi-line conditional"
    echo "Second line in block"
fi

# Test command buffering with incomplete constructs
echo "Testing command buffering:"
for i in 1 2 3; do
    echo "Buffered loop iteration: $i"
done

# Test nested structure buffering
echo "Testing nested structure buffering:"
if [ -n "test" ]; then
    for item in a b c; do
        if [ "$item" = "b" ]; then
            echo "Found item: $item"
        fi
    done
fi

# Test function definition buffering
echo "Testing function definition buffering:"
complex_function() {
    local param="$1"
    if [ -n "$param" ]; then
        echo "Function parameter: $param"
        for i in 1 2; do
            echo "  Sub-iteration: $i"
        done
    else
        echo "No parameter provided"
    fi
    return 0
}

complex_function "test_param"

# Test here document processing
echo "Testing here document processing:"
cat << 'HEREDOC_END'
Multi-line here document content
with multiple lines
and various content types
HEREDOC_END

# Test here document with variable expansion
name="World"
cat << HEREDOC_EXPAND
Hello $name
Current date: $(date +%Y-%m-%d)
HEREDOC_EXPAND

# Test multi-line string processing
echo "Testing multi-line string processing:"
multi_line_string="This is line one
This is line two
This is line three"
echo "Multi-line string: $multi_line_string"

# Test case statement buffering
echo "Testing case statement buffering:"
test_value="option2"
case "$test_value" in
    "option1")
        echo "Selected option 1"
        echo "Additional processing for option 1"
        ;;
    "option2")
        echo "Selected option 2"
        for sub in x y z; do
            echo "  Sub-option: $sub"
        done
        ;;
    *)
        echo "Default option"
        echo "Default processing"
        ;;
esac

# Test while loop buffering
echo "Testing while loop buffering:"
counter=0
while [ $counter -lt 3 ]; do
    echo "While iteration: $counter"
    if [ $counter -eq 1 ]; then
        echo "  Special processing at iteration 1"
    fi
    counter=$((counter + 1))
done

# Test arithmetic expression buffering
echo "Testing arithmetic expression buffering:"
complex_math=$((
    10 + 20 +
    (5 * 3) +
    (100 / 4)
))
echo "Complex math result: $complex_math"

# Test command substitution buffering
echo "Testing command substitution buffering:"
command_result=$(
    echo "Command substitution line 1"
    echo "Command substitution line 2"
    for i in 1 2; do
        echo "Command sub iteration: $i"
    done
)
echo "Command substitution result: $command_result"

# Test pipeline buffering
echo "Testing pipeline buffering:"
echo "Pipeline input" |
while read line; do
    echo "Processed: $line"
done

# Test subshell buffering
echo "Testing subshell buffering:"
(
    echo "Subshell line 1"
    cd /tmp 2>/dev/null || cd /
    echo "Subshell working directory: $(pwd)"
    for i in 1 2; do
        echo "Subshell iteration: $i"
    done
)

# Test brace group buffering
echo "Testing brace group buffering:"
{
    echo "Brace group line 1"
    echo "Brace group line 2"
    local_var="brace_value"
    echo "Brace group variable: $local_var"
}

# Test conditional pipeline buffering
echo "Testing conditional pipeline buffering:"
echo "test input" |
if read input_line; then
    echo "Read from pipeline: $input_line"
    echo "Processing in conditional"
else
    echo "Failed to read from pipeline"
fi

# Test complex nested buffering
echo "Testing complex nested buffering:"
main_function() {
    local func_param="$1"
    
    if [ -n "$func_param" ]; then
        case "$func_param" in
            "complex")
                for iteration in 1 2; do
                    echo "Complex nested iteration: $iteration"
                    
                    nested_result=$(
                        echo "Nested command substitution"
                        if [ $iteration -eq 1 ]; then
                            echo "First iteration processing"
                        else
                            echo "Second iteration processing"
                        fi
                    )
                    
                    echo "Nested result: $nested_result"
                done
                ;;
            *)
                echo "Simple parameter: $func_param"
                ;;
        esac
    fi
}

main_function "complex"

# Test error recovery in buffering
echo "Testing error recovery:"
if [ "test" = "test" ]; then
    echo "Before potential error"
    # Simulate a command that might fail
    false || echo "Error handled gracefully"
    echo "After error handling"
fi

# Test input with mixed quotes and constructs
echo "Testing mixed quotes and constructs:"
for quote_test in "double quoted" 'single quoted' `backtick quoted`; do
    echo "Quote test: $quote_test"
done

# Test buffering with redirections
echo "Testing buffering with redirections:"
{
    echo "Grouped output line 1"
    echo "Grouped output line 2"
    echo "Grouped output line 3"
} > tmp/buffered_output.txt

echo "Buffered output contents:"
cat tmp/buffered_output.txt
rm -f tmp/buffered_output.txt

# Test buffering with background processes
echo "Testing buffering with background processes:"
{
    sleep 0.1
    echo "Background group completed"
} &
bg_group_pid=$!
echo "Background group PID: $bg_group_pid"
wait $bg_group_pid

# Test large buffer handling
echo "Testing large buffer handling:"
large_function() {
    echo "Large function start"
    
    # Generate a moderately large amount of buffered content
    for outer in 1 2 3; do
        echo "Outer loop: $outer"
        
        for inner in a b c d e; do
            echo "  Inner loop: $inner"
            
            case "$inner" in
                "c")
                    echo "    Special case for c"
                    for special in x y; do
                        echo "      Special iteration: $special"
                    done
                    ;;
                *)
                    echo "    Regular case for $inner"
                    ;;
            esac
        done
    done
    
    echo "Large function end"
}

large_function

# Test buffering with eval
echo "Testing buffering with eval:"
eval "
for eval_i in 1 2; do
    echo \"Eval iteration: \$eval_i\"
    if [ \$eval_i -eq 1 ]; then
        echo \"  First eval iteration\"
    fi
done
"

# Test input preprocessing with special characters
echo "Testing special characters in preprocessing:"
special_function() {
    echo "Function with special chars: !@#$%^&*()"
    
    for special in "!" "@" "#" "$" "%"; do
        echo "Processing special char: $special"
    done
}

special_function

# Test preprocessing with different line endings
echo "Testing line ending handling:"
cat << 'EOF'
Line ending test
Multiple lines
Final line
EOF

# Test preprocessing performance with reasonable complexity
echo "Testing preprocessing performance:"
performance_test() {
    local start_marker="performance_start"
    
    for perf_i in $(seq 1 10); do
        case $perf_i in
            1|3|5|7|9)
                echo "Odd iteration: $perf_i"
                ;;
            *)
                echo "Even iteration: $perf_i"
                ;;
        esac
    done
    
    local end_marker="performance_end"
    echo "Performance test completed"
}

performance_test

echo "Input preprocessing test completed"