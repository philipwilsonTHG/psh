# Test line continuation functionality
# PSH supports backslash-newline sequences for line continuation

echo "Testing line continuation:"

# Test basic line continuation
echo "Testing basic line continuation:"
echo "This is a long line that \
continues on the next line"

# Test line continuation in commands
echo "Testing line continuation in commands:"
echo "First part" \
&& echo "Second part" \
&& echo "Third part"

# Test line continuation with variables
echo "Testing line continuation with variables:"
long_variable="This is a very long value that \
spans multiple lines"
echo "long_variable: $long_variable"

# Test line continuation in pipelines
echo "Testing line continuation in pipelines:"
echo "pipeline test" \
| cat \
| cat

# Test line continuation in arithmetic
echo "Testing line continuation in arithmetic:"
result=$((10 + \
20 + \
30))
echo "Arithmetic result: $result"

# Test line continuation in conditional statements
echo "Testing line continuation in conditionals:"
if [ "test" = "test" ] \
   && [ "another" = "another" ] \
   && [ "third" = "third" ]; then
    echo "Conditional with line continuation works"
fi

# Test line continuation in loops
echo "Testing line continuation in loops:"
for item in first \
           second \
           third; do
    echo "Loop item: $item"
done

# Test line continuation in function definitions
echo "Testing line continuation in functions:"
test_function() {
    echo "Function with \
line continuation"
}

test_function

# Test line continuation with command substitution
echo "Testing line continuation in command substitution:"
result=$(echo "Command \
substitution test")
echo "Command substitution result: $result"

# Test line continuation in here documents
echo "Testing line continuation in here documents:"
cat << 'EOF'
This is a here document \
with line continuation
EOF

# Test line continuation with quotes
echo "Testing line continuation with quotes:"
quoted_string="This is a quoted string \
that continues on the next line"
echo "Quoted string: $quoted_string"

# Test line continuation in single quotes (should not work)
echo "Testing line continuation in single quotes:"
single_quoted='This is single quoted \
and should not continue'
echo "Single quoted: $single_quoted"

# Test line continuation in double quotes
echo "Testing line continuation in double quotes:"
double_quoted="This is double quoted \
and should continue"
echo "Double quoted: $double_quoted"

# Test line continuation with escaping
echo "Testing line continuation with escaping:"
escaped_line="Line with \\ \
continuation"
echo "Escaped line: $escaped_line"

# Test multiple consecutive line continuations
echo "Testing multiple line continuations:"
multi_line="First part \
second part \
third part \
fourth part"
echo "Multi-line: $multi_line"

# Test line continuation in array assignments
echo "Testing line continuation in arrays:"
array=(first \
       second \
       third \
       fourth)
echo "Array: ${array[@]}"

# Test line continuation with different whitespace
echo "Testing line continuation with whitespace:"
# Line continuation with spaces before newline
spaced_continuation="Value with spaces \   
continuing here"
echo "Spaced continuation: $spaced_continuation"

# Test line continuation in parameter expansion
echo "Testing line continuation in parameter expansion:"
param_expansion="${long_variable} \
extended with more text"
echo "Parameter expansion: $param_expansion"

# Test line continuation in case statements
echo "Testing line continuation in case statements:"
test_case="value"
case "$test_case" in
    "value") echo "Case with \
line continuation works" ;;
    *) echo "Default case" ;;
esac

# Test line continuation with comments
echo "Testing line continuation with comments:"
# This is a comment \
# that continues on next line
echo "Comment continuation test"

# Test line continuation in while loops
echo "Testing line continuation in while loops:"
counter=0
while [ $counter -lt 3 ] \
      && [ $counter -ge 0 ]; do
    echo "While loop iteration: $counter"
    counter=$((counter + 1))
done

# Test line continuation with redirections
echo "Testing line continuation with redirections:"
echo "Output line 1" \
> tmp/continuation_test.txt
echo "Output line 2" \
>> tmp/continuation_test.txt

echo "File contents:"
cat tmp/continuation_test.txt
rm -f tmp/continuation_test.txt

# Test line continuation in complex expressions
echo "Testing line continuation in complex expressions:"
if [ "$(echo 'test')" = "test" ] \
   && [ $((2 + 2)) -eq 4 ] \
   && [ -n "non-empty" ]; then
    echo "Complex expression with continuations works"
fi

# Test line continuation with background processes
echo "Testing line continuation with background processes:"
sleep 0.1 \
& 
bg_pid=$!
echo "Background process started: $bg_pid"
wait $bg_pid

# Test line continuation in subshells
echo "Testing line continuation in subshells:"
(echo "Subshell command \
with continuation")

# Test line continuation with eval
echo "Testing line continuation with eval:"
eval "echo 'Eval with \
line continuation'"

# Test line continuation preservation in strings
echo "Testing line continuation preservation:"
preserved="This literal backslash-n: \\n \
but this continues"
echo "Preserved: $preserved"

# Test line continuation with special characters
echo "Testing line continuation with special characters:"
special_chars="Characters: !@#$%^&*() \
continuing with more: []{}|;':\",./<>?"
echo "Special chars: $special_chars"

# Test line continuation in nested structures
echo "Testing line continuation in nested structures:"
nested_test() {
    if [ "nested" = "nested" ] \
       && [ "test" = "test" ]; then
        for i in 1 \
                 2 \
                 3; do
            echo "Nested structure item: $i"
        done
    fi
}

nested_test

# Test line continuation error handling
echo "Testing line continuation error handling:"
# Test with trailing spaces (should still work)
trailing_space="Value with trailing space \  
continuing here"
echo "Trailing space: $trailing_space"

# Test line continuation at end of file
echo "Testing line continuation behavior:"
echo "Final test with \
continuation"

echo "Line continuation test completed"