Testing line continuation:
Testing basic line continuation:
This is a long line that continues on the next line
Testing line continuation in commands:
First part
Second part
Third part
Testing line continuation with variables:
long_variable: This is a very long value that spans multiple lines
Testing line continuation in pipelines:
pipeline test
Testing line continuation in arithmetic:
Arithmetic result: 60
Testing line continuation in conditionals:
Conditional with line continuation works
Testing line continuation in loops:
Loop item: first
Loop item: second
Loop item: third
Testing line continuation in functions:
Function with line continuation
Testing line continuation in command substitution:
Command substitution result: Command substitution test
Testing line continuation in here documents:
Testing line continuation with quotes:
Quoted string: This is a quoted string that continues on the next line
Testing line continuation in single quotes:
<command>:55: Parse error at position 7: Expected delimiter after here document operator
psh: This: command not found
psh: EOF: command not found
Traceback (most recent call last):
  File "<frozen runpy>", line 198, in _run_module_as_main
  File "<frozen runpy>", line 88, in _run_code
  File "/Users/pwilson/src/psh/psh/__main__.py", line 169, in <module>
    main()
    ~~~~^^
  File "/Users/pwilson/src/psh/psh/__main__.py", line 163, in main
    exit_code = shell.run_command(script_content, add_to_history=False)
  File "/Users/pwilson/src/psh/psh/shell.py", line 391, in run_command
    return self.script_manager.execute_from_source(input_source, add_to_history)
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pwilson/src/psh/psh/scripting/base.py", line 48, in execute_from_source
    return self.source_processor.execute_from_source(input_source, add_to_history)
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pwilson/src/psh/psh/scripting/source_processor.py", line 92, in execute_from_source
    tokens = tokenize(test_command)
  File "/Users/pwilson/src/psh/psh/lexer/__init__.py", line 62, in tokenize
    tokens = lexer.tokenize()
  File "/Users/pwilson/src/psh/psh/lexer/core.py", line 390, in tokenize
    handler()
    ~~~~~~~^^
  File "/Users/pwilson/src/psh/psh/lexer/state_handlers.py", line 99, in handle_single_quote_state
    self._process_quoted_string("'", allow_expansions=False)
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pwilson/src/psh/psh/lexer/state_handlers.py", line 340, in _process_quoted_string
    self._validate_closing_character(quote_char, error_msg)
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pwilson/src/psh/psh/lexer/helpers.py", line 345, in _validate_closing_character
    self._error(error_message)
    ~~~~~~~~~~~^^^^^^^^^^^^^^^
  File "/Users/pwilson/src/psh/psh/lexer/core.py", line 330, in _error
    return self.error_handler.handle_error(self, message)
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^
  File "/Users/pwilson/src/psh/psh/lexer/position.py", line 333, in handle_error
    raise error
psh.lexer.position.LexerError:
Lexer Error: Unclosed single quote
  at line 1, column 39

>    1 | single_quoted='This is single quoted \
       |                                       ^
