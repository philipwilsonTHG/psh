# Test function return values and early return
# PSH supports return builtin with exit codes (v0.8.0 feature)

# Test basic return values
success_func() {
    echo "Success function"
    return 0
}

failure_func() {
    echo "Failure function"
    return 1
}

custom_return() {
    echo "Custom return"
    return 42
}

# Test return value checking
echo "Testing return values:"

success_func
echo "success_func exit code: $?"

failure_func
echo "failure_func exit code: $?"

custom_return
echo "custom_return exit code: $?"

# Test early return
early_return_func() {
    echo "Before return"
    return 5
    echo "This should not print"
}

early_return_func
echo "early_return_func exit code: $?"

# Test return in conditionals
conditional_return() {
    local value="$1"
    echo "Testing value: $value"
    
    if [ "$value" = "good" ]; then
        echo "Good value"
        return 0
    elif [ "$value" = "bad" ]; then
        echo "Bad value"
        return 1
    else
        echo "Unknown value"
        return 2
    fi
    
    echo "This should not print"
}

conditional_return "good"
echo "good result: $?"

conditional_return "bad"
echo "bad result: $?"

conditional_return "unknown"
echo "unknown result: $?"

# Test return in loops
loop_return_func() {
    for i in 1 2 3 4 5; do
        echo "Loop iteration: $i"
        if [ "$i" = "3" ]; then
            echo "Returning from loop"
            return 10
        fi
    done
    echo "Loop completed normally"
    return 0
}

loop_return_func
echo "loop_return_func exit code: $?"

# Test function return without explicit return
implicit_return() {
    echo "Function without explicit return"
    true  # This sets exit status to 0
}

implicit_return
echo "implicit_return exit code: $?"

implicit_return_false() {
    echo "Function with false command"
    false  # This sets exit status to 1
}

implicit_return_false
echo "implicit_return_false exit code: $?"

# Test return value propagation in pipelines
pipeline_return() {
    return 3
}

pipeline_return | cat
echo "pipeline return through pipe: $?"