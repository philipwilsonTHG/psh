# Test recursive function calls
# PSH supports function recursion with proper parameter handling

# Test simple recursion - countdown
countdown() {
    local n="$1"
    echo "Count: $n"
    
    if [ "$n" -le 0 ]; then
        echo "Done!"
        return 0
    fi
    
    countdown $((n - 1))
}

echo "Testing countdown recursion:"
countdown 3

# Test factorial calculation
factorial() {
    local n="$1"
    
    if [ "$n" -le 1 ]; then
        echo 1
        return 0
    fi
    
    local prev=$(factorial $((n - 1)))
    echo $((n * prev))
}

echo "Testing factorial recursion:"
echo "Factorial of 5: $(factorial 5)"
echo "Factorial of 0: $(factorial 0)"

# Test Fibonacci sequence
fibonacci() {
    local n="$1"
    
    if [ "$n" -le 0 ]; then
        echo 0
        return 0
    elif [ "$n" -eq 1 ]; then
        echo 1
        return 0
    fi
    
    local a=$(fibonacci $((n - 1)))
    local b=$(fibonacci $((n - 2)))
    echo $((a + b))
}

echo "Testing Fibonacci recursion:"
for i in 0 1 2 3 4 5; do
    echo "Fib($i) = $(fibonacci $i)"
done

# Test recursive directory-like structure simulation
process_level() {
    local level="$1"
    local max_level="$2"
    local prefix="$3"
    
    echo "${prefix}Level $level"
    
    if [ "$level" -lt "$max_level" ]; then
        process_level $((level + 1)) "$max_level" "${prefix}  "
        process_level $((level + 1)) "$max_level" "${prefix}  "
    fi
}

echo "Testing tree-like recursion:"
process_level 1 3 ""

# Test mutual recursion
is_even() {
    local n="$1"
    if [ "$n" -eq 0 ]; then
        echo "true"
    else
        is_odd $((n - 1))
    fi
}

is_odd() {
    local n="$1"
    if [ "$n" -eq 0 ]; then
        echo "false"
    else
        is_even $((n - 1))
    fi
}

echo "Testing mutual recursion:"
echo "is_even(4): $(is_even 4)"
echo "is_odd(4): $(is_odd 4)"
echo "is_even(7): $(is_even 7)"
echo "is_odd(7): $(is_odd 7)"