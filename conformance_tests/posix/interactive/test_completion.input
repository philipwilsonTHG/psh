# Test completion functionality
# PSH supports tab completion for files/directories (v0.2.0 feature)

# Note: Completion is primarily interactive (tab-triggered)
# This test focuses on testing the underlying completion logic

echo "Testing completion functionality:"

# Setup test environment
mkdir -p tmp/completion_test
cd tmp/completion_test

# Create test files and directories
touch file1.txt file2.txt file3.log
touch command_test command_example
mkdir dir1 dir2 directory_test
touch dir1/nested_file.txt
touch dir2/another_file.log

# Test file completion concepts
echo "Testing file completion concepts:"
echo "Files available for completion:"
ls -1

# Test directory completion concepts  
echo "Testing directory completion concepts:"
echo "Directories available for completion:"
ls -1d */

# Test command completion concepts
echo "Testing command completion concepts:"
# Add some executables to test directory for completion
chmod +x command_test command_example
export PATH="$(pwd):$PATH"

echo "Commands available for completion:"
ls -1 command_*

# Test variable completion concepts
echo "Testing variable completion concepts:"
export TEST_VAR1="value1"
export TEST_VAR2="value2"
export COMPLETION_TEST="test"

echo "Variables available for completion:"
env | grep "^TEST_" | cut -d= -f1
env | grep "^COMPLETION_" | cut -d= -f1

# Test completion in different contexts
echo "Testing completion contexts:"

# Filename completion after commands
echo "Context: filename after command"
echo "Example: cat <TAB> would show:"
ls *.txt

# Directory completion with cd
echo "Context: directory with cd"
echo "Example: cd <TAB> would show:"
ls -1d */

# Variable completion in expansions
echo "Context: variable completion"
echo "Example: echo \$TEST_<TAB> would complete to:"
env | grep "^TEST_" | head -1

# Test completion with partial matches
echo "Testing partial match completion:"
echo "Files starting with 'file':"
ls file*

echo "Directories starting with 'dir':"
ls -1d dir*/

echo "Commands starting with 'command':"
ls command*

# Test completion edge cases
echo "Testing completion edge cases:"

# Empty directory
mkdir empty_dir
echo "Empty directory completion:"
ls empty_dir/

# No matches
echo "No matches case:"
ls nonexistent* 2>/dev/null || echo "No matches found"

# Single match
touch unique_file.txt
echo "Single match case:"
ls unique*

# Multiple matches with common prefix
touch prefix_file1.txt prefix_file2.txt
echo "Common prefix matches:"
ls prefix*

# Test completion with special characters
echo "Testing special characters in completion:"
touch "file with spaces.txt"
touch "file-with-dashes.txt"
touch "file_with_underscores.txt"

echo "Files with special characters:"
ls *with*

# Test completion with hidden files
echo "Testing hidden file completion:"
touch .hidden_file1 .hidden_file2
echo "Hidden files:"
ls -1 .hidden*

# Test completion case sensitivity
echo "Testing case sensitivity:"
touch File1.TXT FILE2.txt
echo "Case variations:"
ls [Ff]ile*
ls FILE*

# Test completion in subdirectories
echo "Testing subdirectory completion:"
echo "Files in dir1/:"
ls dir1/
echo "Files in dir2/:"
ls dir2/

# Test completion with glob patterns
echo "Testing completion with glob patterns:"
echo "Text files:"
ls *.txt
echo "Log files:"
ls *.log

# Test completion performance concepts
echo "Testing completion performance concepts:"
echo "Large directory completion test:"
# Create moderate number of files for testing
for i in {1..20}; do
    touch "large_test_file_$i.txt"
done
echo "Files created: $(ls large_test_file_*.txt | wc -l)"

# Cleanup and test completion in parent directory
cd ..
echo "Testing completion from parent directory:"
echo "completion_test contents:"
ls completion_test/ | head -5

rm -rf completion_test
echo "Completion test completed"