# Test multiline input handling
# PSH supports multi-line command continuation (v0.26.0 feature)

echo "Testing multiline input handling:"

# Test line continuation with backslash
echo "Testing line continuation:"
echo "This is a long line" \
     "continued on next line"

echo "Math with continuation:" \
     $((1 + 2 + 3))

# Test multiline string literals
echo "Testing multiline strings:"
cat << 'EOF'
This is a multiline
string that spans
multiple lines
EOF

# Test multiline with variable expansion
name="PSH"
cat << EOF
This is $name
on multiple lines
with variable expansion
EOF

# Test multiline commands with proper continuation
echo "Testing multiline command structures:"

# Multiline if statement (typical interactive pattern)
if [ "test" = "test" ]; then
    echo "Multiline if works"
    echo "Second line in if"
fi

# Multiline for loop
for item in one two three; do
    echo "Processing: $item"
    echo "  With additional info"
done

# Multiline while loop
count=1
while [ $count -le 2 ]; do
    echo "Count: $count"
    echo "  In multiline while"
    count=$((count + 1))
done

# Test multiline function definition
multiline_func() {
    echo "This is a multiline"
    echo "function definition"
    local var="local value"
    echo "Local variable: $var"
}

echo "Testing multiline function:"
multiline_func

# Test multiline case statement
value="test"
case "$value" in
    test)
        echo "Case matched"
        echo "Multiple lines in case"
        ;;
    other)
        echo "Other case"
        ;;
    *)
        echo "Default case"
        ;;
esac

# Test multiline pipelines  
echo "Testing multiline pipelines:"
echo "data" | cat | cat

# Test multiline command substitution
echo "Testing multiline command substitution:"
result=$(echo "First line"; echo "Second line")
echo "Result: $result"

# Test multiline arithmetic
echo "Testing multiline arithmetic:"
result=$((1 + 2 + 3 + 4))
echo "Arithmetic result: $result"

# Test multiline variable assignment
echo "Testing multiline variable assignment:"
long_var="This is a long string \
that continues on the next line"
echo "Long variable: $long_var"

# Test multiline array assignment (if supported)
echo "Testing multiline lists:"
list="item1
item2
item3"
echo "Multiline list: $list"

# Test multiline with comments
echo "Testing multiline with comments:"
echo "Command with comment" \
     # This is a comment
     "and continuation"

# Test multiline in different quote contexts
echo "Testing multiline in quotes:"
echo "This is a multiline
string in double quotes"

echo 'This is a multiline
string in single quotes'

# Test complex multiline structure
echo "Testing complex multiline structure:"
for file in $(ls | head -3); do
    if [ -f "$file" ]; then
        echo "File: $file"
        echo "  Type: regular file"
    else
        echo "File: $file"
        echo "  Type: not regular"
    fi
done

# Test multiline error handling
echo "Testing multiline error handling:"
if false; then
    echo "This should not execute"
    echo "Even in multiline context"
else
    echo "Error handling works"
    echo "In multiline else clause"
fi

# Test nested multiline structures
echo "Testing nested multiline structures:"
for outer in 1 2; do
    echo "Outer: $outer"
    for inner in a b; do
        echo "  Inner: $inner"
        if [ "$outer" = "1" ]; then
            echo "    Special case"
        fi
    done
done

echo "Multiline input test completed"