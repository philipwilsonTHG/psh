Testing multiline input handling:
Testing line continuation:
This is a long line continued on next line
Math with continuation: 6
Testing multiline strings:
Testing multiline command structures:
Multiline if works
Second line in if
Processing: one
  With additional info
Processing: two
  With additional info
Processing: three
  With additional info
Count: 1
  In multiline while
Count: 2
  In multiline while
Testing multiline function:
This is a multiline
function definition
Local variable: local value
Case matched
Multiple lines in case
Testing multiline pipelines:
data
Testing multiline command substitution:
Result: First line
Second line
Testing multiline arithmetic:
Arithmetic result: 10
Testing multiline variable assignment:
Long variable: This is a long string that continues on the next line
Testing multiline lists:
<command>:14: Parse error at position 7: Expected delimiter after here document operator
psh: This: command not found
psh: string: command not found
psh: multiple: command not found
psh: EOF: command not found
psh: This: command not found
psh: on: command not found
psh: with: command not found
psh: EOF: command not found
Traceback (most recent call last):
  File "<frozen runpy>", line 198, in _run_module_as_main
  File "<frozen runpy>", line 88, in _run_code
  File "/Users/pwilson/src/psh/psh/__main__.py", line 169, in <module>
    main()
    ~~~~^^
  File "/Users/pwilson/src/psh/psh/__main__.py", line 163, in main
    exit_code = shell.run_command(script_content, add_to_history=False)
  File "/Users/pwilson/src/psh/psh/shell.py", line 391, in run_command
    return self.script_manager.execute_from_source(input_source, add_to_history)
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pwilson/src/psh/psh/scripting/base.py", line 48, in execute_from_source
    return self.source_processor.execute_from_source(input_source, add_to_history)
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pwilson/src/psh/psh/scripting/source_processor.py", line 92, in execute_from_source
    tokens = tokenize(test_command)
  File "/Users/pwilson/src/psh/psh/lexer/__init__.py", line 62, in tokenize
    tokens = lexer.tokenize()
  File "/Users/pwilson/src/psh/psh/lexer/core.py", line 390, in tokenize
    handler()
    ~~~~~~~^^
  File "/Users/pwilson/src/psh/psh/lexer/state_handlers.py", line 95, in handle_double_quote_state
    self._process_quoted_string('"', allow_expansions=True)
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pwilson/src/psh/psh/lexer/state_handlers.py", line 340, in _process_quoted_string
    self._validate_closing_character(quote_char, error_msg)
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pwilson/src/psh/psh/lexer/helpers.py", line 345, in _validate_closing_character
    self._error(error_message)
    ~~~~~~~~~~~^^^^^^^^^^^^^^^
  File "/Users/pwilson/src/psh/psh/lexer/core.py", line 330, in _error
    return self.error_handler.handle_error(self, message)
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^
  File "/Users/pwilson/src/psh/psh/lexer/position.py", line 333, in handle_error
    raise error
psh.lexer.position.LexerError:
Lexer Error: Unclosed double quote
  at line 1, column 12

>    1 | list="item1
       |            ^
